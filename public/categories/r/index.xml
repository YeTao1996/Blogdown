<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Ye (Janson) Tao</title>
    <link>/categories/r/</link>
      <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Sun, 19 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/categories/r/</link>
    </image>
    
    <item>
      <title>Tidyverse Join Function Part-2</title>
      <link>/post/tidyverse-join-function-part-2/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidyverse-join-function-part-2/</guid>
      <description>


&lt;p&gt;In the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;Part1 Introducton for Join function family in tidyverse family&lt;/a&gt;, we explored some useful functions by exploring some toy examples. In this post, we go further with some slightly more complicated dataset. By doing so helps us have a deeper unstanding how join family works.&lt;/p&gt;
&lt;p&gt;First part will just go over the function a liitle bit with a different dataset, and second part will practice in the more complicated datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes &amp;lt;- tibble::tribble(
       ~name, ~alignment,  ~gender,          ~publisher,
   &amp;quot;Magneto&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,            &amp;quot;Marvel&amp;quot;,
     &amp;quot;Storm&amp;quot;,     &amp;quot;good&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
  &amp;quot;Mystique&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
    &amp;quot;Batman&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
     &amp;quot;Joker&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
  &amp;quot;Catwoman&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,                &amp;quot;DC&amp;quot;,
   &amp;quot;Hellboy&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;, &amp;quot;Dark Horse Comics&amp;quot;
  )

publishers &amp;lt;- tibble::tribble(
  ~publisher, ~yr_founded,
        &amp;quot;DC&amp;quot;,       1934L,
    &amp;quot;Marvel&amp;quot;,       1939L,
     &amp;quot;Image&amp;quot;,       1992L
  )

superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inner Join&lt;/h2&gt;
&lt;p&gt;As a reminder, &lt;code&gt;inner_join(x, y)&lt;/code&gt; returns all matched rows and columns between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; tables. Notice that rows from &lt;code&gt;publishers&lt;/code&gt; will duplicate themselves for matching the rows from &lt;code&gt;superheros&lt;/code&gt; in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;% 
    inner_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   name     alignment gender publisher yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel          1939
## 2 Storm    good      female Marvel          1939
## 3 Mystique bad       female Marvel          1939
## 4 Batman   good      male   DC              1934
## 5 Joker    bad       male   DC              1934
## 6 Catwoman bad       female DC              1934&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Left Join&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;left_join(x, y)&lt;/code&gt;: Return all rows from x, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;% 
    left_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Semi join&lt;/h2&gt;
&lt;p&gt;semi_join(x, y): Return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x. This is a filtering join.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;superheros&lt;/code&gt; is the baseline table&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;% 
    semi_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   name     alignment gender publisher
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    
## 1 Magneto  bad       male   Marvel   
## 2 Storm    good      female Marvel   
## 3 Mystique bad       female Marvel   
## 4 Batman   good      male   DC       
## 5 Joker    bad       male   DC       
## 6 Catwoman bad       female DC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Full Join&lt;/h2&gt;
&lt;p&gt;full_join(x, y): Return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;% 
    full_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA
## 8 &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;   Image                   1992&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, all the logic basically follows what we have talked in the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;previous post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if column names in &lt;code&gt;table A&lt;/code&gt; and &lt;code&gt;table B&lt;/code&gt; are the same. How we gonna do for this situation.&lt;/li&gt;
&lt;li&gt;what if the colname we wanna join has different names in two tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s check out the different datatset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts = readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/cb649926d41ce73490a9bb710e1501a273061723/parts.rds&amp;quot;))

parts_categories &amp;lt;- readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/30fc459770c89e46cce9cce99752ca95fb1d06fe/part_categories.rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;glimpse-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;glimpse the data&lt;/h2&gt;
&lt;p&gt;Here we notice that both &lt;code&gt;table parts&lt;/code&gt; and &lt;code&gt;table parts_categories&lt;/code&gt; have col name called &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   part_num name                                                   part_cat_id
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                                        &amp;lt;dbl&amp;gt;
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow House Print                1
## 2 0902     Baseplate 16 x 24 with Set 080 Small White House Print           1
## 3 0903     Baseplate 16 x 24 with Set 080 Red House Print                   1
## 4 0904     Baseplate 16 x 24 with Set 080 Large White House Print           1
## 5 1        Homemaker Bookcase 2 x 4 x 4                                     7
## 6 10016414 Sticker Sheet #1 for 41055-1                                    58&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts_categories %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##      id name                   
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  
## 1     1 Baseplates             
## 2     3 Bricks Sloped          
## 3     4 Duplo, Quatro and Primo
## 4     5 Bricks Special         
## 5     6 Bricks Wedged          
## 6     7 Containers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s pratcice. In this case we are told that &lt;code&gt;part_cat_id and&lt;/code&gt; from &lt;code&gt;parts&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; from &lt;code&gt;parts_categories&lt;/code&gt; are the two columns we want to join. In this case we need to specify which two colnames we wanna join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;% 
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;)) %&amp;gt;% head # we need double quote in colname &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name.x                                          part_cat_id name.y   
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                                 &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow House Pr~           1 Baseplat~
## 2 0902     Baseplate 16 x 24 with Set 080 Small White Hou~           1 Baseplat~
## 3 0903     Baseplate 16 x 24 with Set 080 Red House Print            1 Baseplat~
## 4 0904     Baseplate 16 x 24 with Set 080 Large White Hou~           1 Baseplat~
## 5 1        Homemaker Bookcase 2 x 4 x 4                              7 Containe~
## 6 10016414 Sticker Sheet #1 for 41055-1                             58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we find that &lt;code&gt;inner join function&lt;/code&gt; aissgned two different names to the same colname from two table: &lt;code&gt;name.x&lt;/code&gt; and &lt;code&gt;name.y&lt;/code&gt;. we can specify the suffox in the name by doing so.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;% 
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;), 
               suffix = c(&amp;quot;_parts&amp;quot;, &amp;quot;_part_categoroes&amp;quot;)) %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name_parts                             part_cat_id name_part_categor~
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                        &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow~           1 Baseplates        
## 2 0902     Baseplate 16 x 24 with Set 080 Small ~           1 Baseplates        
## 3 0903     Baseplate 16 x 24 with Set 080 Red Ho~           1 Baseplates        
## 4 0904     Baseplate 16 x 24 with Set 080 Large ~           1 Baseplates        
## 5 1        Homemaker Bookcase 2 x 4 x 4                     7 Containers        
## 6 10016414 Sticker Sheet #1 for 41055-1                    58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the new table above keeps &lt;code&gt;part_cat_id&lt;/code&gt; as column name since &lt;code&gt;parts table&lt;/code&gt; works as the baseline table.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse Join function Part-1</title>
      <link>/post/test/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/test/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post serves as a learning record and practice with tidyverse package which is super awesome and convenient for data exploration and manipulation. PLease also check out this very help tutorial: &lt;a href=&#34;https://stat545.com/join-cheatsheet.html&#34; class=&#34;uri&#34;&gt;https://stat545.com/join-cheatsheet.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s explore some fucntions in tidyverse for joining tables. And these functions basically follow same idea in SQL.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inner Join (inner_join)&lt;/li&gt;
&lt;li&gt;Left Join (left_join)&lt;/li&gt;
&lt;li&gt;Right Join (right_join)&lt;/li&gt;
&lt;li&gt;Full Join (full_join)&lt;/li&gt;
&lt;li&gt;Semi Join (semi_join)&lt;/li&gt;
&lt;li&gt;Anti Join (anti_join)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may ask we already have SQL for doing this and why you need Tidyverse to do the same thing. This is because there’re lots of time you don’t have permissions to do so in database, or don’t want to ETL for one-off(single time) analysis, then utilising dplyr and R to join the data can prove to be more efficient.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA = tibble(
    CustomerID =  1:3,
    NumberOfOrder = c(5, 10, 4),
    TotalVolumeOrder = c(500, 240, 40),
    AverageVolumeOrder = c(100,24, 10),
    LastOrderDate = ymd(c(&amp;quot;2017-10-01&amp;quot;,&amp;quot;2019-12-31&amp;quot;, &amp;quot;2014-10-10&amp;quot;))
)

# or you can create a tibble like this using tribble
tableB &amp;lt;- tibble::tribble(
    
    ~CustomerID,  ~Age,  ~Gender,   ~FavouriteProduct,
    1L,           20L,       &amp;quot;Male&amp;quot;,   &amp;quot;T-Shirt&amp;quot;,
    2L,           23L,       &amp;quot;Female&amp;quot;, &amp;quot;Legging&amp;quot;,
    4L,           21L,       &amp;quot;Male&amp;quot;,   &amp;quot;Jumpers&amp;quot;
)

tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500                100 2017-10-01   
## 2          2            10              240                 24 2019-12-31   
## 3          3             4               40                 10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Inner Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;inner join&lt;/code&gt; will join same shared columns together within two tables, and we need to specify which column we wanna join. And here we use &lt;code&gt;CutomerID&lt;/code&gt;for joining two tables together. For example, if we decided to join on Customer ID, the new table would contain rows 1 and 2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;CustomerID&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate   Age
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;        &amp;lt;int&amp;gt;
## 1          1             5              500              100 2017-10-01       20
## 2          2            10              240               24 2019-12-31       23
## # ... with 2 more variables: Gender &amp;lt;chr&amp;gt;, FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;inner join&lt;/code&gt; makes sense when two columns are shared in both tables. Code below failed since join column &lt;code&gt;NumberOfOrder&lt;/code&gt; which is missing from RHS =&amp;gt; this is the tableB(RHS)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;NumberOfOrder&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `by` can&amp;#39;t contain join column `NumberOfOrder` which is missing from RHS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Left Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Left join&lt;/code&gt; will also combine two tables. However for this timee &lt;code&gt;Left join&lt;/code&gt; will not make any change on table on the left. This also means that left table works as a baseline and we can add other columns from right table to the baseline table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500                100 2017-10-01   
## 2          2            10              240                 24 2019-12-31   
## 3          3             4               40                 10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    left_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate   Age
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;        &amp;lt;int&amp;gt;
## 1          1             5              500              100 2017-10-01       20
## 2          2            10              240               24 2019-12-31       23
## 3          3             4               40               10 2014-10-10       NA
## # ... with 2 more variables: Gender &amp;lt;chr&amp;gt;, FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have some &lt;code&gt;NA&lt;/code&gt; Values since &lt;code&gt;CustomerID&lt;/code&gt; = 3 in &lt;code&gt;Left table&lt;/code&gt; doesn’t have information for Age, Gender, FavouriteProduct columns&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;right-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Right Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And &lt;code&gt;Right Join&lt;/code&gt; basically follows the same logic which is the opposite of &lt;code&gt;left join&lt;/code&gt; functtion&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500                100 2017-10-01   
## 2          2            10              240                 24 2019-12-31   
## 3          3             4               40                 10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    right_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate   Age
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;        &amp;lt;int&amp;gt;
## 1          1             5              500              100 2017-10-01       20
## 2          2            10              240               24 2019-12-31       23
## 3          4            NA               NA               NA NA               21
## # ... with 2 more variables: Gender &amp;lt;chr&amp;gt;, FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Full Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Notice that table given by &lt;code&gt;left join&lt;/code&gt; and &lt;code&gt;right join&lt;/code&gt; are subset of table given by &lt;code&gt;Full Join&lt;/code&gt;. &lt;code&gt;Full join&lt;/code&gt; includes all the columns in tableA and tableB&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    full_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate   Age
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;        &amp;lt;int&amp;gt;
## 1          1             5              500              100 2017-10-01       20
## 2          2            10              240               24 2019-12-31       23
## 3          3             4               40               10 2014-10-10       NA
## 4          4            NA               NA               NA NA               21
## # ... with 2 more variables: Gender &amp;lt;chr&amp;gt;, FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;anti-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Anti Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As we have seen when looking at creating training &amp;amp; test datasets for machine learning in dplyr, anti joins are super helpful. An anti join will return all of the rows from the first table where there are not matching values from the second. The new anti join table will only contain data from the first table, based on the join predicate listed above. An example of this is shown below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    anti_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          3             4               40                 10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically &lt;code&gt;table A&lt;/code&gt; works as a baseline table, and &lt;code&gt;anti_join&lt;/code&gt; function will remove the row, which also appears in the &lt;code&gt;table B&lt;/code&gt;, and return the remained row here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Semi-join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And the last one is &lt;code&gt;Semi-join&lt;/code&gt;. Let’s see how it works&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500                100 2017-10-01   
## 2          2            10              240                 24 2019-12-31   
## 3          3             4               40                 10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    semi_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrder LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;              &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500                100 2017-10-01   
## 2          2            10              240                 24 2019-12-31&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works similar as &lt;code&gt;inner join&lt;/code&gt; since it has two shared rows here. But we also notice that tableA works as baseline table and the new table does not have columns coming from tableB. we can think of it as we first do the &lt;code&gt;inner_join&lt;/code&gt; to have a &lt;code&gt;new_table&lt;/code&gt;, and then remove all the columns originating from &lt;code&gt;table B&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Default Detection</title>
      <link>/project/credit-project/test/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/project/credit-project/test/</guid>
      <description>


&lt;div id=&#34;introduction&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;Fraud&lt;/code&gt;&lt;/strong&gt; attempts have seen a drastic increase in recent years, making fraud detection is more important than ever. For instance, recent research shows a typical organization loses 5% of revenues each year because of fraud with a median loss of $145,000 per case. Consequently in this project, we’re interested in &lt;strong&gt;&lt;code&gt;Fraud Detection&lt;/code&gt;&lt;/strong&gt;, and we will figure out an ML-based way for recognizing fraud activities with several features given. Notice that this should be a classification problem.&lt;/p&gt;
&lt;p&gt;In general, this project will be composed of 4 parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data Exploration &amp;amp; Data Preprocessing&lt;/li&gt;
&lt;li&gt;Feature Selection &amp;amp; Dimension Reduction&lt;/li&gt;
&lt;li&gt;Modeling with various techniques: Xgboost and Random Forest Logistic regression, Decision tree&lt;/li&gt;
&lt;li&gt;Model Performance Evaluation &amp;amp; Comparison&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Key questions about the dataset:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How are a fraud and non-fraud classes different from each other?&lt;/li&gt;
&lt;li&gt;When does fraud events tend to occur?&lt;/li&gt;
&lt;li&gt;Which variable has the most contribution to our model?&lt;/li&gt;
&lt;li&gt;What is the best model among these 4 modeling methodologies(model comparison)?&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;data-overview&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Data Overview&lt;/strong&gt;&lt;/h1&gt;
&lt;table style=&#34;width:100%;&#34;&gt;
&lt;colgroup&gt;
&lt;col width=&#34;4%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;4%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;7%&#34; /&gt;
&lt;col width=&#34;10%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;5%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;col width=&#34;6%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_type&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;factor.ordered&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;factor.n_unique&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;factor.top_counts&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;numeric.p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;numeric.hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;factor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Class&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;FALSE&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Not: 284315, Def: 492&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;94813.85958&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.748815e+04&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;54201.5000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;84692.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.393205e+05&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.727920e+05&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▇▅▆▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.958696e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-56.407510&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.9203734&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0181088&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.315642e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.454930e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.651309e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-72.715728&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5985499&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0654856&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.037239e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.205773e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.516255e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-48.325589&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.8903648&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1798463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.027195e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.382558e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.415869e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.683171&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.8486401&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0198465&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.433413e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.687534e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.380247e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-113.743307&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6915971&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0543358&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.119264e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.480167e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.332271e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26.160506&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.7682956&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2741871&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.985649e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.330163e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.237094e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-43.557242&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5540759&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0401031&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.704361e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.205895e+02&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.194353e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-73.216718&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2086297&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0223580&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.273459e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.000721e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.098632e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-13.434066&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6430976&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0514287&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.971390e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.559499e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.088850e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-24.588262&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5354257&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0929174&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.539234e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.374514e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V11&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.020713e+00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.797473&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.7624942&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0327574&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.395934e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.201891e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.992014e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18.683715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4055715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.1400326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.182380e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.848392e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.952742e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5.791881&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6485393&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0135681&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.625050e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.126883e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▃▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.585956e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-19.214326&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4255740&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0506013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.931498e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.052677e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.153160e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4.498945&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5828843&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0480715&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.488208e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.877742e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▂▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.762529e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-14.129855&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4680368&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0664133&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.232963e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.731511e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.493371e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-25.162799&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4837483&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0656758&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.996750e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.253526e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.381762e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9.498746&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4988498&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0036363&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.008067e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.041069e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▂▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8.140405e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7.213527&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.4562989&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0037348&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.589494e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.591971e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.709250e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-54.497720&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2117214&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0624811&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.330408e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.942090e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.345240e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-34.830382&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2283949&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0294502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.863772e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.720284e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V22&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.257016e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.933144&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.5423504&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0067819&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.285536e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.050309e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.244603e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-44.807735&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.1618463&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0111929&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1.476421e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.252841e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▁▇▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V24&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.056471e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.836627&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3545861&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0409761&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.395266e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.584549e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▆▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.212781e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-10.295397&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3171451&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0165935&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.507156e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.519589e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▂▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.822270e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.604551&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.3269839&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0521391&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.409522e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.517346e+00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▆▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.036325e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-22.565679&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0708395&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0013421&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.104510e-02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.161220e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;V28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.300833e-01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-15.430084&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.0529598&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.0112438&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.828000e-02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.384781e+01&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▇▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Amount&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;88.34962&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.501201e+02&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;22.0000000&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7.716500e+01&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2.569116e+04&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;data-exploration&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Data Exploration&lt;/strong&gt;&lt;/h1&gt;
&lt;div id=&#34;data-imbalance-check&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Data Imbalance Check&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As we can see from the table below, This dataset has 284315 legitimate credit card transactions and only 492 problematic transactions. This is Data Imbalance and it is a common situation we need to deal with credit default detection projects.&lt;/p&gt;
&lt;p&gt;Because the dataset is extremely unbalanced. Even a Dumb classifier, which simply uses the frequency for prediction, would obtain around 99% accuracy on this task. This is clear that a simple measure of mean accuracy should not be used due to insensitivity to false negatives. However, the good news is that there’s no missing value in this dataset.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Notice that since only &lt;code&gt;492&lt;/code&gt; of all transactions are fraudulent, always predicting that a transaction is not fraudulent would lead to a low error rate. It is important to construct a model that performs better than this. In other words, training a Machine Learning Model with this imbalanced dataset, often causes the model to develop a certain bias towards the majority class. Also, we have to keep in mind that accuracy is no more important, but other criteria like specificity, ROC score, and many others needed to be calculated in this projection for the purpose of comparison.
&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explore-difference-betweem-default-and-non-default-class-in-amount-and-time&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Explore Difference betweem Default and Non-default class In Amount and Time&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Recall that for privacy issues, v1 to v28 is all PCA transformed, which means that we have no idea what they should be. However, time and amount have physical meanings and therefore we can put particular attention on these two variables.&lt;/p&gt;
&lt;div id=&#34;explore-feature---time&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Explore feature - Time&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;As the plot below suggests, we can see some differences between default and non-default transactions according to the time feature. For two shaded regions in the plot, we notice that the amount of innocent transactions within that two parts goes down. While the default one stays at a high position. This is probably because people who do non-fraudulent transactions are having sleep during those two periods of time. While the problematic transaction is more likely to occur during the night since crime might feel afraid to be caught while using fake credit cards during the daytime.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Notice that the &lt;code&gt;Time&lt;/code&gt; variable is not very significant is our model since it measures the seconds elapsed between each transaction and the first transaction in the dataset. It can not give us too much useful information, therefore we discard this variable in the following modeling parts.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explore-feature---amount&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Explore Feature - Amount&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The density plot shows the right skewness since most credit card transactions should be around a smaller amount of money. For example, buying a bottle of water or some sandwiches on the campus, and a small number of such people will use a credit card to buy some luxury goods. In addition to that, as the graph suggests above, generally speaking, the amount for default transaction is lower than the non default one. However, when the amount is around 100, the amount for the default part is much higher. So, we might conclude that default is more likely to occur when the amount is &lt;code&gt;$100&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;explore-remaining-features&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Explore Remaining Features&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In this section, we plot the distribution of every single feature corresponding to its distribution. Here are the criteria: If two distribution overlapped each other for a large part, that feature may not be helpful in distinguishing default and non-default. On the other hand, if two distributions separated from each other, the corresponding feature is good to include inside the model. However, we have to keep in mind that this part only gives us a general overview on which features might be significant. We will further check this importance of variable later by using &lt;code&gt;Random Forest&lt;/code&gt; to calculate the importance of each feature.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;According to the plot above, from v1 to v14, we can see two distributions of following features which somehow
overlapped: &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v10&lt;/code&gt;, &lt;code&gt;v12&lt;/code&gt;, &lt;code&gt;v13&lt;/code&gt;, &lt;code&gt;v14&lt;/code&gt;, &lt;code&gt;v3&lt;/code&gt;, &lt;code&gt;v5&lt;/code&gt;, &lt;code&gt;v6&lt;/code&gt;, &lt;code&gt;v7&lt;/code&gt;, &lt;code&gt;v9&lt;/code&gt;. And the remaining &lt;code&gt;v11&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, &lt;code&gt;v4&lt;/code&gt;, &lt;code&gt;v8&lt;/code&gt; show that their two distributions are sperated from each other, which might be suitable for modeling.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So follow the same logic, we find two distributions of following features somehow overlapped: &lt;code&gt;v15&lt;/code&gt;, &lt;code&gt;v16&lt;/code&gt;, &lt;code&gt;v18&lt;/code&gt;, &lt;code&gt;v22&lt;/code&gt;, &lt;code&gt;v24&lt;/code&gt;, &lt;code&gt;v25&lt;/code&gt;, &lt;code&gt;v26&lt;/code&gt;. And the remaining &lt;code&gt;v17&lt;/code&gt;, &lt;code&gt;v19&lt;/code&gt;, &lt;code&gt;v20&lt;/code&gt;, &lt;code&gt;v21&lt;/code&gt;, &lt;code&gt;v23&lt;/code&gt;, &lt;code&gt;v27&lt;/code&gt;, &lt;code&gt;v28&lt;/code&gt; show that their two distributions are sperated from each other.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;corrlation-analysis-for-each-feature&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Corrlation Analysis for each feature&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;960&#34; /&gt;
From the PLot above We know that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a moderate to strong positive correlation between Amount and V2.&lt;/li&gt;
&lt;li&gt;a weak to moderate positive correlation between Amount and V5.&lt;/li&gt;
&lt;li&gt;a moderate to strong positive correlation between Time and V3.&lt;/li&gt;
&lt;li&gt;a very weak positive correlation between V11, V15, and V25.&lt;/li&gt;
&lt;li&gt;a moderate to strong negative correlation between Amount and V7.&lt;/li&gt;
&lt;li&gt;a very weak negative correlation between Amount and V20.&lt;/li&gt;
&lt;li&gt;There are no significant correlation between either Amount or Time and the rest of the variables (V1, V4, V6, V8, V9, V10, V12, V13, V14, V16, V17, V18, V19, V21, V22, V23, V24, V26, V27, V28).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The graph above demonstrates that most of the data features are not correlated. As a reminder, most of the features were presented to a &lt;code&gt;Principal Component Analysis&lt;/code&gt; (PCA) algorithm. The features &lt;code&gt;V1&lt;/code&gt; to &lt;code&gt;V28&lt;/code&gt; are most probably the Principal Components resulted after transforming the real features through &lt;code&gt;PCA.&lt;/code&gt; However, we have no idea what the original features should be.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;data-preprocessing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Data Preprocessing&lt;/strong&gt;&lt;/h1&gt;
&lt;div id=&#34;normalization&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Normalization&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From the histogram above, we can see the distribution is right-skewed and it is not centered around its mean. Therefore, normalization is needed for the variable amount.&lt;/p&gt;
&lt;p&gt;Here is the distribution of amount after Normalizing&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/project/credit-project/credit_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;960&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
