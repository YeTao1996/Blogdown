<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidyverse | Ye Tao (Janson)</title>
    <link>/categories/tidyverse/</link>
      <atom:link href="/categories/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <description>Tidyverse</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2020</copyright><lastBuildDate>Thu, 23 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Tidyverse</title>
      <link>/categories/tidyverse/</link>
    </image>
    
    <item>
      <title>Tidy Verb Variation Family</title>
      <link>/post/tidy-verb-variation-filter-select-etc/</link>
      <pubDate>Thu, 23 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidy-verb-variation-filter-select-etc/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(nycflights13)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;some-variations-of-verbs&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Some variations of verbs&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;tidyverse&lt;/code&gt; also ships with some variations of verbs which could be useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;select_if&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;**Select_if&lt;/h2&gt;
&lt;p&gt;we use select_if when we wanna select multiple numerical columns in this case. This is extremely useful when there’re lots of features in your dataset. Below select all the columns that are numerical.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# only select columns which are numerical
flights %&amp;gt;% select_if(is.numeric)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 14
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 7 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, flight &amp;lt;int&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,
## #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is also the same as above. While &lt;code&gt;~&lt;/code&gt; means that this is a formula and &lt;code&gt;.&lt;/code&gt; represents whatever columns you’re working with, and it is flights in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% select_if(~ is.numeric(.))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 14
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 7 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, flight &amp;lt;int&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;,
## #   hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% select_if(~ !is.numeric(.)) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 5
##    carrier tailnum origin dest  time_hour          
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt; &amp;lt;dttm&amp;gt;             
##  1 UA      N14228  EWR    IAH   2013-01-01 05:00:00
##  2 UA      N24211  LGA    IAH   2013-01-01 05:00:00
##  3 AA      N619AA  JFK    MIA   2013-01-01 05:00:00
##  4 B6      N804JB  JFK    BQN   2013-01-01 05:00:00
##  5 DL      N668DN  LGA    ATL   2013-01-01 06:00:00
##  6 UA      N39463  EWR    ORD   2013-01-01 05:00:00
##  7 B6      N516JB  EWR    FLL   2013-01-01 06:00:00
##  8 EV      N829AS  LGA    IAD   2013-01-01 06:00:00
##  9 B6      N593JB  JFK    MCO   2013-01-01 06:00:00
## 10 AA      N3ALAA  LGA    ORD   2013-01-01 06:00:00
## # ... with 336,766 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% rename_if(is.numeric, toupper)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     YEAR MONTH   DAY DEP_TIME SCHED_DEP_TIME DEP_DELAY ARR_TIME
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: SCHED_ARR_TIME &amp;lt;int&amp;gt;,
## #   ARR_DELAY &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, FLIGHT &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, AIR_TIME &amp;lt;dbl&amp;gt;, DISTANCE &amp;lt;dbl&amp;gt;, HOUR &amp;lt;dbl&amp;gt;,
## #   MINUTE &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% mutate_if(
  ~ is.numeric(.) &amp;amp;&amp;amp; is.double(.),
  round
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% filter_if(
  ~ is.numeric(.),
  all_vars(. &amp;gt; 0)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 79,090 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      613            610         3      925
##  5  2013     1     1      623            610        13      920
##  6  2013     1     1      632            608        24      740
##  7  2013     1     1      715            713         2      911
##  8  2013     1     1      732            729         3     1041
##  9  2013     1     1      732            645        47     1011
## 10  2013     1     1      743            730        13     1107
## # ... with 79,080 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% rename_at(
  vars(starts_with(&amp;quot;arr_&amp;quot;)),
  ~ str_replace(., &amp;quot;arr_&amp;quot;, &amp;quot;arrival_&amp;quot;)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arrival_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;        &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2          830
##  2  2013     1     1      533            529         4          850
##  3  2013     1     1      542            540         2          923
##  4  2013     1     1      544            545        -1         1004
##  5  2013     1     1      554            600        -6          812
##  6  2013     1     1      554            558        -4          740
##  7  2013     1     1      555            600        -5          913
##  8  2013     1     1      557            600        -3          709
##  9  2013     1     1      557            600        -3          838
## 10  2013     1     1      558            600        -2          753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arrival_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% filter_at(
  vars(ends_with(&amp;quot;_time&amp;quot;), -air_time),
  all_vars(. &amp;gt;= 1200)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 183,159 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1     1200           1200         0     1408
##  2  2013     1     1     1202           1207        -5     1318
##  3  2013     1     1     1203           1205        -2     1501
##  4  2013     1     1     1203           1200         3     1519
##  5  2013     1     1     1204           1200         4     1500
##  6  2013     1     1     1205           1200         5     1503
##  7  2013     1     1     1206           1209        -3     1325
##  8  2013     1     1     1211           1215        -4     1423
##  9  2013     1     1     1217           1220        -3     1414
## 10  2013     1     1     1217           1218        -1     1525
## # ... with 183,149 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr)
library(stringr)
msleep &amp;lt;- ggplot2::msleep

glimpse(msleep)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Observations: 83
## Variables: 11
## $ name         &amp;lt;chr&amp;gt; &amp;quot;Cheetah&amp;quot;, &amp;quot;Owl monkey&amp;quot;, &amp;quot;Mountain beaver&amp;quot;, &amp;quot;Grea...
## $ genus        &amp;lt;chr&amp;gt; &amp;quot;Acinonyx&amp;quot;, &amp;quot;Aotus&amp;quot;, &amp;quot;Aplodontia&amp;quot;, &amp;quot;Blarina&amp;quot;, &amp;quot;Bo...
## $ vore         &amp;lt;chr&amp;gt; &amp;quot;carni&amp;quot;, &amp;quot;omni&amp;quot;, &amp;quot;herbi&amp;quot;, &amp;quot;omni&amp;quot;, &amp;quot;herbi&amp;quot;, &amp;quot;herbi...
## $ order        &amp;lt;chr&amp;gt; &amp;quot;Carnivora&amp;quot;, &amp;quot;Primates&amp;quot;, &amp;quot;Rodentia&amp;quot;, &amp;quot;Soricomorph...
## $ conservation &amp;lt;chr&amp;gt; &amp;quot;lc&amp;quot;, NA, &amp;quot;nt&amp;quot;, &amp;quot;lc&amp;quot;, &amp;quot;domesticated&amp;quot;, NA, &amp;quot;vu&amp;quot;, N...
## $ sleep_total  &amp;lt;dbl&amp;gt; 12.1, 17.0, 14.4, 14.9, 4.0, 14.4, 8.7, 7.0, 10.1...
## $ sleep_rem    &amp;lt;dbl&amp;gt; NA, 1.8, 2.4, 2.3, 0.7, 2.2, 1.4, NA, 2.9, NA, 0....
## $ sleep_cycle  &amp;lt;dbl&amp;gt; NA, NA, NA, 0.1333333, 0.6666667, 0.7666667, 0.38...
## $ awake        &amp;lt;dbl&amp;gt; 11.9, 7.0, 9.6, 9.1, 20.0, 9.6, 15.3, 17.0, 13.9,...
## $ brainwt      &amp;lt;dbl&amp;gt; NA, 0.01550, NA, 0.00029, 0.42300, NA, NA, NA, 0....
## $ bodywt       &amp;lt;dbl&amp;gt; 50.000, 0.480, 1.350, 0.019, 600.000, 3.850, 20.4...&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;filtering-across-multiple-columns&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Filtering across multiple columns&lt;/h3&gt;
&lt;p&gt;The dplyr package has a few powerful variants to filter across multiple columns in one go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;filter_all()&lt;/code&gt; will filter all columns based on your further instructions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_if()&lt;/code&gt; requires a function that returns a boolean to indicate which columns to filter on. If that is true, the filter instructions will be followed for those columns. filter the specific columns with some conditions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter_at()&lt;/code&gt;requires you to specify columns inside a vars() argument for which the filtering will be done.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In these cases, there is a general syntax: first you specify which columns, then you mention the condition for the filter. In many cases you will need a . operator within the condition which refers to the values we are looking at.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-with-a-value&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filter with a value&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Let’s first review how we use &lt;code&gt;filter&lt;/code&gt; to filter out our rows with specific condition.&lt;/p&gt;
&lt;p&gt;Below will filter filter out row when the column variable &lt;code&gt;order&lt;/code&gt; has value called Carnicvora
ANd here is the schema:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter(your-colname == &amp;quot;some Specific value in that column&amp;quot;)&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    filter(order == &amp;quot;Carnivora&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 11
##    name  genus vore  order conservation sleep_total sleep_rem sleep_cycle
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 Chee~ Acin~ carni Carn~ lc                  12.1      NA        NA    
##  2 Nort~ Call~ carni Carn~ vu                   8.7       1.4       0.383
##  3 Dog   Canis carni Carn~ domesticated        10.1       2.9       0.333
##  4 Dome~ Felis carni Carn~ domesticated        12.5       3.2       0.417
##  5 Gray~ Hali~ carni Carn~ lc                   6.2       1.5      NA    
##  6 Tiger Pant~ carni Carn~ en                  15.8      NA        NA    
##  7 Jagu~ Pant~ carni Carn~ nt                  10.4      NA        NA    
##  8 Lion  Pant~ carni Carn~ vu                  13.5      NA        NA    
##  9 Casp~ Phoca carni Carn~ vu                   3.5       0.4      NA    
## 10 Genet Gene~ carni Carn~ &amp;lt;NA&amp;gt;                 6.3       1.3      NA    
## 11 Arct~ Vulp~ carni Carn~ &amp;lt;NA&amp;gt;                12.5      NA        NA    
## 12 Red ~ Vulp~ carni Carn~ &amp;lt;NA&amp;gt;                 9.8       2.4       0.35 
## # ... with 3 more variables: awake &amp;lt;dbl&amp;gt;, brainwt &amp;lt;dbl&amp;gt;, bodywt &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-with-mutilpe-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filter with mutilpe values&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;By looking ar the &lt;code&gt;order&lt;/code&gt; column, we can see this &lt;code&gt;%in%&lt;/code&gt; works very conveniently somhow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    select(name:order) %&amp;gt;% 
    filter(order %in% c(&amp;quot;Carnivora&amp;quot;, &amp;quot;Primates&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 24 x 4
##    name              genus         vore  order    
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    
##  1 Cheetah           Acinonyx      carni Carnivora
##  2 Owl monkey        Aotus         omni  Primates 
##  3 Northern fur seal Callorhinus   carni Carnivora
##  4 Dog               Canis         carni Carnivora
##  5 Grivet            Cercopithecus omni  Primates 
##  6 Patas monkey      Erythrocebus  omni  Primates 
##  7 Domestic cat      Felis         carni Carnivora
##  8 Galago            Galago        omni  Primates 
##  9 Gray seal         Haliochoerus  carni Carnivora
## 10 Human             Homo          omni  Primates 
## # ... with 14 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-with-mutilple-conditions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filter with mutilple conditions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Of course you can add some extra conditions like below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    filter(order == &amp;quot;Carnivora&amp;quot; &amp;amp; conservation == &amp;quot;lc&amp;quot;) # and&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 11
##   name  genus vore  order conservation sleep_total sleep_rem sleep_cycle
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 Chee~ Acin~ carni Carn~ lc                  12.1      NA            NA
## 2 Gray~ Hali~ carni Carn~ lc                   6.2       1.5          NA
## # ... with 3 more variables: awake &amp;lt;dbl&amp;gt;, brainwt &amp;lt;dbl&amp;gt;, bodywt &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    filter(order == &amp;quot;Carnivora&amp;quot; | conservation == &amp;quot;ls&amp;quot;) # or&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 11
##    name  genus vore  order conservation sleep_total sleep_rem sleep_cycle
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 Chee~ Acin~ carni Carn~ lc                  12.1      NA        NA    
##  2 Nort~ Call~ carni Carn~ vu                   8.7       1.4       0.383
##  3 Dog   Canis carni Carn~ domesticated        10.1       2.9       0.333
##  4 Dome~ Felis carni Carn~ domesticated        12.5       3.2       0.417
##  5 Gray~ Hali~ carni Carn~ lc                   6.2       1.5      NA    
##  6 Tiger Pant~ carni Carn~ en                  15.8      NA        NA    
##  7 Jagu~ Pant~ carni Carn~ nt                  10.4      NA        NA    
##  8 Lion  Pant~ carni Carn~ vu                  13.5      NA        NA    
##  9 Casp~ Phoca carni Carn~ vu                   3.5       0.4      NA    
## 10 Genet Gene~ carni Carn~ &amp;lt;NA&amp;gt;                 6.3       1.3      NA    
## 11 Arct~ Vulp~ carni Carn~ &amp;lt;NA&amp;gt;                12.5      NA        NA    
## 12 Red ~ Vulp~ carni Carn~ &amp;lt;NA&amp;gt;                 9.8       2.4       0.35 
## # ... with 3 more variables: awake &amp;lt;dbl&amp;gt;, brainwt &amp;lt;dbl&amp;gt;, bodywt &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filtering-out-na-values&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filtering out NA values&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now we need to se how to filter out &lt;code&gt;NA&lt;/code&gt; value; detecting the missing value is really important in data analysis project. And we firstly filter out the &lt;code&gt;missing values&lt;/code&gt; from some particular columns let’s say &lt;code&gt;vore&lt;/code&gt; in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    filter(is.na(vore))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 11
##   name  genus vore  order conservation sleep_total sleep_rem sleep_cycle
##   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
## 1 Vesp~ Calo~ &amp;lt;NA&amp;gt;  Rode~ &amp;lt;NA&amp;gt;                 7        NA        NA    
## 2 Dese~ Para~ &amp;lt;NA&amp;gt;  Erin~ lc                  10.3       2.7      NA    
## 3 Deer~ Pero~ &amp;lt;NA&amp;gt;  Rode~ &amp;lt;NA&amp;gt;                11.5      NA        NA    
## 4 Phal~ Phal~ &amp;lt;NA&amp;gt;  Dipr~ &amp;lt;NA&amp;gt;                13.7       1.8      NA    
## 5 Rock~ Proc~ &amp;lt;NA&amp;gt;  Hyra~ lc                   5.4       0.5      NA    
## 6 Mole~ Spal~ &amp;lt;NA&amp;gt;  Rode~ &amp;lt;NA&amp;gt;                10.6       2.4      NA    
## 7 Musk~ Sunc~ &amp;lt;NA&amp;gt;  Sori~ &amp;lt;NA&amp;gt;                12.8       2         0.183
## # ... with 3 more variables: awake &amp;lt;dbl&amp;gt;, brainwt &amp;lt;dbl&amp;gt;, bodywt &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And we can filter away those missing values from my datset in &lt;code&gt;vore&lt;/code&gt; column. ANd now there is no missing values within the &lt;code&gt;vore&lt;/code&gt; variable in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
    filter(!is.na(vore))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 76 x 11
##    name  genus vore  order conservation sleep_total sleep_rem sleep_cycle
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;
##  1 Chee~ Acin~ carni Carn~ lc                  12.1      NA        NA    
##  2 Owl ~ Aotus omni  Prim~ &amp;lt;NA&amp;gt;                17         1.8      NA    
##  3 Moun~ Aplo~ herbi Rode~ nt                  14.4       2.4      NA    
##  4 Grea~ Blar~ omni  Sori~ lc                  14.9       2.3       0.133
##  5 Cow   Bos   herbi Arti~ domesticated         4         0.7       0.667
##  6 Thre~ Brad~ herbi Pilo~ &amp;lt;NA&amp;gt;                14.4       2.2       0.767
##  7 Nort~ Call~ carni Carn~ vu                   8.7       1.4       0.383
##  8 Dog   Canis carni Carn~ domesticated        10.1       2.9       0.333
##  9 Roe ~ Capr~ herbi Arti~ lc                   3        NA        NA    
## 10 Goat  Capri herbi Arti~ lc                   5.3       0.6      NA    
## # ... with 66 more rows, and 3 more variables: awake &amp;lt;dbl&amp;gt;, brainwt &amp;lt;dbl&amp;gt;,
## #   bodywt &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After having some experience with &lt;code&gt;filter&lt;/code&gt; verb, it is the time to see it’s variation.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-all&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;&lt;code&gt;Filter all&lt;/code&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Admittedly, msleep is not the best database to showcase this power, but imagine you have a database with a few columns and you want to select all rows that have a certain word in either column. Take a financial dataframe for instance and you want to select all rows with ‘food’, whether food is mentioned in the main category column, the subcategory column, the comments column or the place you’ve spent it.
You could make a long filter statement with 4 different conditions wrapped inside OR statements. Or you just filter across all columns for the string “food”.&lt;/p&gt;
&lt;p&gt;In the sample code below I’m searching for the string “Ca” &lt;strong&gt;&lt;code&gt;across all columns&lt;/code&gt;&lt;/strong&gt;. I want to keep rows where the string “Ca” is present in &lt;strong&gt;ANY&lt;/strong&gt; of the variables, so I will wrap the condition in any_vars().
The below code basically asks to retain any rows where any of the variables has the pattern “Ca” inside. And let me decompose the step.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.`str_detect(msleep, pattern = &amp;quot;Ca&amp;quot;)` will return logical vector contains TRUE and FASLE to see if condition is met.
2. `any_vars` takes in the conditions or logical vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
  select(name:order, sleep_total, -vore) %&amp;gt;% 
  filter_all(any_vars(str_detect(., pattern = &amp;quot;Ca&amp;quot;)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 16 x 4
##    name              genus        order        sleep_total
##    &amp;lt;chr&amp;gt;             &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;
##  1 Cheetah           Acinonyx     Carnivora           12.1
##  2 Northern fur seal Callorhinus  Carnivora            8.7
##  3 Vesper mouse      Calomys      Rodentia             7  
##  4 Dog               Canis        Carnivora           10.1
##  5 Roe deer          Capreolus    Artiodactyla         3  
##  6 Goat              Capri        Artiodactyla         5.3
##  7 Guinea pig        Cavis        Rodentia             9.4
##  8 Domestic cat      Felis        Carnivora           12.5
##  9 Gray seal         Haliochoerus Carnivora            6.2
## 10 Tiger             Panthera     Carnivora           15.8
## 11 Jaguar            Panthera     Carnivora           10.4
## 12 Lion              Panthera     Carnivora           13.5
## 13 Caspian seal      Phoca        Carnivora            3.5
## 14 Genet             Genetta      Carnivora            6.3
## 15 Arctic fox        Vulpes       Carnivora           12.5
## 16 Red fox           Vulpes       Carnivora            9.8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same can be done for numerical values: This code will retain any rows that has any value below 0.1:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;%  
  select(name, sleep_total:bodywt) %&amp;gt;% 
  filter_all(any_vars(. &amp;lt; 0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 47 x 7
##    name             sleep_total sleep_rem sleep_cycle awake  brainwt bodywt
##    &amp;lt;chr&amp;gt;                  &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt; &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
##  1 Owl monkey              17         1.8      NA       7    1.55e-2  0.48 
##  2 Greater short-t~        14.9       2.3       0.133   9.1  2.90e-4  0.019
##  3 Vesper mouse             7        NA        NA      17   NA        0.045
##  4 Dog                     10.1       2.9       0.333  13.9  7.00e-2 14    
##  5 Roe deer                 3        NA        NA      21    9.82e-2 14.8  
##  6 Guinea pig               9.4       0.8       0.217  14.6  5.50e-3  0.728
##  7 Chinchilla              12.5       1.5       0.117  11.5  6.40e-3  0.42 
##  8 Star-nosed mole         10.3       2.2      NA      13.7  1.00e-3  0.06 
##  9 African giant p~         8.3       2        NA      15.7  6.60e-3  1    
## 10 Lesser short-ta~         9.1       1.4       0.15   14.9  1.40e-4  0.005
## # ... with 37 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The any_vars() statement is equivalent to OR, so of course there is an equivalent for AND statements as well:all_vars(). The below code will retain any rows where all values are above 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;%  
  select(name, sleep_total:bodywt, -awake) %&amp;gt;% 
  filter_all(all_vars(. &amp;gt; 1))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 6
##   name  sleep_total sleep_rem sleep_cycle brainwt bodywt
##   &amp;lt;chr&amp;gt;       &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;       &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 Human           8       1.9         1.5    1.32     62&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Filter if&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;filter_all()&lt;/code&gt; function can sometimes go a bit wild. The msleep dataset has a set of sleep and weight measurements where some data is missing - there is nothing I can do to add data there. But the first few set of columns just contain info on animals. The vore of Vesper Mouse is missing, but that is info I can still dig up and add to the dataframe if I wanted.&lt;/p&gt;
&lt;p&gt;So imagine I want to find out all data rows where we NA in the first few columns. filter_all(any_vars(is.na(.))) will be quite useless because it would return 27 rows, many of which are missing data in the measurement section.&lt;/p&gt;
&lt;p&gt;In this case: &lt;code&gt;filter_if()&lt;/code&gt; comes in handy. The describing columns are all character columns, while the measurement data is numeric. So using filter_if() I can specify that I want to just filter on &lt;code&gt;character variables.&lt;/code&gt; In this case I only get 7 rows. In other words, we use &lt;code&gt;filter_if&lt;/code&gt; when we want to first select all the character variable, and then give out any values that is missing for each column&lt;/p&gt;
&lt;p&gt;&lt;code&gt;filter_if()&lt;/code&gt; needs 3 arguments to work;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;data&lt;/code&gt;, a tibble&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;predicate function&lt;/code&gt; (a function that returns TRUE, or FALSE) which will select the columns we want to work on.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;the &lt;code&gt;condition.&lt;/code&gt; The condition can be applied to all the columns that were selected by the predicate function (hence the &lt;code&gt;all_vars()&lt;/code&gt;) or only to at least one (you’d use any_vars() then). Try to change the condition, or the predicate function, to figure out how filter_if() works. The dot is a placeholder that stands for whatever columns where selected.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is.character is the predicate function, and condition is the remained thing with any_vars&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
  select(name:order, sleep_total:sleep_rem) %&amp;gt;% 
  filter_if(is.character, any_vars(is.na(.))) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 6
##   name            genus       vore  order          sleep_total sleep_rem
##   &amp;lt;chr&amp;gt;           &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 Vesper mouse    Calomys     &amp;lt;NA&amp;gt;  Rodentia               7        NA  
## 2 Desert hedgehog Paraechinus &amp;lt;NA&amp;gt;  Erinaceomorpha        10.3       2.7
## 3 Deer mouse      Peromyscus  &amp;lt;NA&amp;gt;  Rodentia              11.5      NA  
## 4 Phalanger       Phalanger   &amp;lt;NA&amp;gt;  Diprotodontia         13.7       1.8
## 5 Rock hyrax      Procavia    &amp;lt;NA&amp;gt;  Hyracoidea             5.4       0.5
## 6 Mole rat        Spalax      &amp;lt;NA&amp;gt;  Rodentia              10.6       2.4
## 7 Musk shrew      Suncus      &amp;lt;NA&amp;gt;  Soricomorpha          12.8       2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, you can add is.numeric, is.integer, is.double, is.logical, is.factor. If you have data columns, you can load the lubridate package, and use is.POSIXt or is.Date.&lt;/p&gt;
&lt;p&gt;Filter at
One of the more powerful functions is filter_at(): it does not filter all columns, nor does it need you to specify the type of column, you can just select columns to which the change should happen via the vars() argument. This argument allows anything that can be done within a select statement: so you can refer to them by name, but also by logical numerical functions, regex, etc (See my first blog post for select options).&lt;/p&gt;
&lt;p&gt;The second argument is the condition for selection. Similar to the examples above, you can use all_vars() if all columns need to return TRUE (AND equivalent), or any_vars() in case just one variable needs to return TRUE (OR equivalent).&lt;/p&gt;
&lt;p&gt;Example: refer to columns by their name:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
  select(name, sleep_total:sleep_rem, brainwt:bodywt) %&amp;gt;% 
  filter_at(vars(sleep_total, sleep_rem), all_vars(.&amp;gt;5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   name                 sleep_total sleep_rem brainwt bodywt
##   &amp;lt;chr&amp;gt;                      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 Thick-tailed opposum        19.4       6.6  NA       0.37
## 2 Giant armadillo             18.1       6.1   0.081  60&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Example: using another select option:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;msleep %&amp;gt;% 
  select(name, sleep_total:sleep_rem, brainwt:bodywt) %&amp;gt;% 
  filter_at(vars(contains(&amp;quot;sleep&amp;quot;)), all_vars(.&amp;gt;5))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   name                 sleep_total sleep_rem brainwt bodywt
##   &amp;lt;chr&amp;gt;                      &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;   &amp;lt;dbl&amp;gt;  &amp;lt;dbl&amp;gt;
## 1 Thick-tailed opposum        19.4       6.6  NA       0.37
## 2 Giant armadillo             18.1       6.1   0.081  60&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data Tidying with Tidyverse in R</title>
      <link>/post/data-tidying-with-tidyverse-in-r/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/data-tidying-with-tidyverse-in-r/</guid>
      <description>


&lt;div id=&#34;tidy-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Tidy Data&lt;/h2&gt;
&lt;p&gt;There are three interrelated rules which make a dataset tidy&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each variable must have its own column (long format).&lt;/li&gt;
&lt;li&gt;Each observation must have its own row (wide format).&lt;/li&gt;
&lt;li&gt;Each value must have its own cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the datasets from R for Data Science to show that the same data could be organised in different ways.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make sure you have tidyr 1.0
library(tidyr)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning: package &amp;#39;tidyr&amp;#39; was built under R version 3.5.3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;pivot_longer&lt;/code&gt; is the replacement for &lt;code&gt;gather()&lt;/code&gt; and &lt;code&gt;pivot_wider()&lt;/code&gt; is the replacement for &lt;code&gt;spread()&lt;/code&gt;.
Both are designed to be simpler and can handle more cases than gather and spread.&lt;/p&gt;
&lt;div id=&#34;pivot-longer&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pivot longer&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;relig_income %&amp;gt;%
  pivot_longer(-religion, names_to = &amp;quot;income&amp;quot;, values_to = &amp;quot;count&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 180 x 3
##    religion income             count
##    &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;              &amp;lt;dbl&amp;gt;
##  1 Agnostic &amp;lt;$10k                 27
##  2 Agnostic $10-20k               34
##  3 Agnostic $20-30k               60
##  4 Agnostic $30-40k               81
##  5 Agnostic $40-50k               76
##  6 Agnostic $50-75k              137
##  7 Agnostic $75-100k             122
##  8 Agnostic $100-150k            109
##  9 Agnostic &amp;gt;150k                 84
## 10 Agnostic Don&amp;#39;t know/refused    96
## # ... with 170 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;billboard %&amp;gt;%
  pivot_longer(
    cols = starts_with(&amp;quot;wk&amp;quot;),
    names_to = &amp;quot;week&amp;quot;,
    names_prefix = &amp;quot;wk&amp;quot;,
    names_ptypes = list(week = integer()),
    values_to = &amp;quot;rank&amp;quot;,
    values_drop_na = TRUE,
  )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5,307 x 5
##    artist  track                   date.entered  week  rank
##    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                   &amp;lt;date&amp;gt;       &amp;lt;int&amp;gt; &amp;lt;dbl&amp;gt;
##  1 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       1    87
##  2 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       2    82
##  3 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       3    72
##  4 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       4    77
##  5 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       5    87
##  6 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       6    94
##  7 2 Pac   Baby Don&amp;#39;t Cry (Keep... 2000-02-26       7    99
##  8 2Ge+her The Hardest Part Of ... 2000-09-02       1    91
##  9 2Ge+her The Hardest Part Of ... 2000-09-02       2    87
## 10 2Ge+her The Hardest Part Of ... 2000-09-02       3    92
## # ... with 5,297 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;pivot-wider&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Pivot wider&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fish_encounters %&amp;gt;% pivot_wider(
  names_from = station,
  values_from = seen,
  values_fill = list(seen = 0)
)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 19 x 12
##    fish  Release I80_1 Lisbon  Rstr Base_TD   BCE   BCW  BCE2  BCW2   MAE
##    &amp;lt;fct&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
##  1 4842        1     1      1     1       1     1     1     1     1     1
##  2 4843        1     1      1     1       1     1     1     1     1     1
##  3 4844        1     1      1     1       1     1     1     1     1     1
##  4 4845        1     1      1     1       1     0     0     0     0     0
##  5 4847        1     1      1     0       0     0     0     0     0     0
##  6 4848        1     1      1     1       0     0     0     0     0     0
##  7 4849        1     1      0     0       0     0     0     0     0     0
##  8 4850        1     1      0     1       1     1     1     0     0     0
##  9 4851        1     1      0     0       0     0     0     0     0     0
## 10 4854        1     1      0     0       0     0     0     0     0     0
## 11 4855        1     1      1     1       1     0     0     0     0     0
## 12 4857        1     1      1     1       1     1     1     1     1     0
## 13 4858        1     1      1     1       1     1     1     1     1     1
## 14 4859        1     1      1     1       1     0     0     0     0     0
## 15 4861        1     1      1     1       1     1     1     1     1     1
## 16 4862        1     1      1     1       1     1     1     1     1     0
## 17 4863        1     1      0     0       0     0     0     0     0     0
## 18 4864        1     1      0     0       0     0     0     0     0     0
## 19 4865        1     1      1     0       0     0     0     0     0     0
## # ... with 1 more variable: MAW &amp;lt;int&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;us_rent_income %&amp;gt;%
  pivot_wider(names_from = variable, values_from = c(estimate, moe))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 52 x 6
##    GEOID NAME             estimate_income estimate_rent moe_income moe_rent
##    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;                      &amp;lt;dbl&amp;gt;         &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;
##  1 01    Alabama                    24476           747        136        3
##  2 02    Alaska                     32940          1200        508       13
##  3 04    Arizona                    27517           972        148        4
##  4 05    Arkansas                   23789           709        165        5
##  5 06    California                 29454          1358        109        3
##  6 08    Colorado                   32401          1125        109        5
##  7 09    Connecticut                35326          1123        195        5
##  8 10    Delaware                   31560          1076        247       10
##  9 11    District of Col~           43198          1424        681       17
## 10 12    Florida                    25952          1077         70        3
## # ... with 42 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>General Introduction of Tidyverse Series2</title>
      <link>/post/general-introduction-of-tidyverse-series2/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/general-introduction-of-tidyverse-series2/</guid>
      <description>


&lt;div id=&#34;tidyverse-introduction-part-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Tidyverse Introduction Part 2&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;This is part 2 of the Tidyverse Series; In this post, we continue to explore some extremely useful tools for data analysis&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(nycflights13) # Please intstall this packages which contains some interating dataset.
flight_subset &amp;lt;- 
    flights %&amp;gt;% sample_n(5)


flight_subset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     5     3      758            759        -1     1028
## 2  2013     2    16     1922           1925        -3     2220
## 3  2013     1     6     1636           1550        46     1927
## 4  2013     9    29     1341           1345        -4     1704
## 5  2013     1    13     1824           1706        78     2015
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;mutate-create-new-variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Mutate&lt;/strong&gt; : Create new variable&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;mutate&lt;/code&gt; to create new variable, and then add them to the end of the origain data set&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;dep_delay&lt;/code&gt;, &lt;code&gt;arr_delay:&lt;/code&gt; Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    mutate(gain = arr_delay-dep_delay, # minutes for getting ealier or later
           speed = distance / air_time * 60, # in miles/hrs
            gain_per_hour = gain / (air_time/60)) # we can also refer the variable we just created in the 3 lines above; In this case, it is variable gain&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 22
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     5     3      758            759        -1     1028
## 2  2013     2    16     1922           1925        -3     2220
## 3  2013     1     6     1636           1550        46     1927
## 4  2013     9    29     1341           1345        -4     1704
## 5  2013     1    13     1824           1706        78     2015
## # ... with 15 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;, gain &amp;lt;dbl&amp;gt;, speed &amp;lt;dbl&amp;gt;, gain_per_hour &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conditional-mutation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Conditional Mutation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now, let’s explore some advanced use of mutate and transumate; Here is 3 ways we can use for recode variable name.&lt;/p&gt;
&lt;p&gt;Norice that &lt;code&gt;transumate&lt;/code&gt; has the same functionality with &lt;code&gt;mutate&lt;/code&gt;, but the only difference is that &lt;code&gt;transmuate&lt;/code&gt; will give the related column, while &lt;code&gt;mutate&lt;/code&gt; will give all the variables plus new variable you just created.&lt;/p&gt;
&lt;div id=&#34;method-1-ifelse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 1 ifelse&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    transmute(arr_delay = arr_delay,
              status = ifelse(arr_delay &amp;gt; 0, &amp;quot;delayed&amp;quot;, &amp;quot;On Time&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   arr_delay status 
##       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
## 1         0 On Time
## 2        -9 On Time
## 3        25 delayed
## 4        31 delayed
## 5        80 delayed&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;method-2-case_when&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 2 Case_when&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here is another way we can write with the &lt;code&gt;ifelse&lt;/code&gt; funciton. And this time, we can handle mutiple conditions&lt;/p&gt;
&lt;p&gt;And this is every similar with if else statement in python, which makes the code very readable; Notice that the order for the ifelse statement matters, and &lt;code&gt;TRUE ~ &#34;long&#34;&lt;/code&gt; means that whatever remained will be recode as &lt;code&gt;longer&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_distance &amp;lt;- flight_subset %&amp;gt;% 
    transmute(distance, 
              distance_type = case_when(
                  distance &amp;lt; 500 ~ &amp;quot;short&amp;quot;, # if
                  distance &amp;lt; 1000 ~ &amp;quot;mid&amp;quot;,  # elif
                  TRUE ~ &amp;quot;long&amp;quot;             # else
              ))

flight_distance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   distance distance_type
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        
## 1      762 mid          
## 2      950 mid          
## 3     2425 long         
## 4     1428 long         
## 5      872 mid&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the code above remind me of the &lt;code&gt;numpy&lt;/code&gt; package in Python. In &lt;code&gt;numpy&lt;/code&gt;, we have &lt;code&gt;numpy_where&lt;/code&gt; function helps to vectorize and accelerate the processing speed; and it would be much quicker than &lt;code&gt;apply&lt;/code&gt; function in python, and the format of code is eaxctly the same as above; please check out this &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzAxNTc0Mjg0Mg==&amp;amp;mid=2653296308&amp;amp;idx=1&amp;amp;sn=254bcaa023ac25e883a2b2b44293b3f3&amp;amp;chksm=802dd4a1b75a5db7d5b2955e3340eb6ab9095691b77fc8186f0a6f28b3e083779a6d8771ce5a&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=&amp;amp;sharer_sharetime=1578641340491&amp;amp;sharer_shareid=955e84dae4795ad4e079035b644897e4&amp;amp;key=e1c2dfa459d4b974c6dd352bb5e6fed432504266a86ed3fd459b09fa751cceec67cf1fb3264d3398971de102cf0d57692ff578d09e543bf3ca7907d569e30b148f293e478a9bf5550adfa2206159fcd9&amp;amp;ascene=14&amp;amp;uin=MTIxODU1NTA0NA%3D%3D&amp;amp;devicetype=Windows+10&amp;amp;version=6208006f&amp;amp;lang=zh_CN&amp;amp;exportkey=AS6hBBImDHRn3FsC9OovRLo%3D&amp;amp;pass_ticket=zyB9BMfXJt76KOucgp6FR47eJMSs9WN%2FGL8EM2wRAkmgb8cWCWPiZ7s9zbFo%2FePb&#34;&gt;article for more information in python.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;method-3-recoding&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 3 Recoding&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_distance %&amp;gt;% mutate(distance_type = recode(distance_type,
            &amp;quot;long&amp;quot; = &amp;quot;long_distance&amp;quot;, 
            &amp;quot;mid&amp;quot; = &amp;quot;mid_distance&amp;quot;,
            &amp;quot;short&amp;quot; = &amp;quot;short _distance&amp;quot;)) # here we do need necessarily double quote for long, mid, short&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   distance distance_type
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        
## 1      762 mid_distance 
## 2      950 mid_distance 
## 3     2425 long_distance
## 4     1428 long_distance
## 5      872 mid_distance&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;arrange-changes-the-ordering-of-the-rows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;arrange&lt;/code&gt;: changes the ordering of the rows&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% arrange(year, month, day)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% arrange(desc(dep_delay))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     9      641            900      1301     1242
##  2  2013     6    15     1432           1935      1137     1607
##  3  2013     1    10     1121           1635      1126     1239
##  4  2013     9    20     1139           1845      1014     1457
##  5  2013     7    22      845           1600      1005     1044
##  6  2013     4    10     1100           1900       960     1342
##  7  2013     3    17     2321            810       911      135
##  8  2013     6    27      959           1900       899     1236
##  9  2013     7    22     2257            759       898      121
## 10  2013    12     5      756           1700       896     1058
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summarize-and-group_by-operations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;summarize&lt;/code&gt; and &lt;code&gt;group_by&lt;/code&gt; operations&lt;/h2&gt;
&lt;p&gt;In this case, we first goup all our data into different subgroup based on &lt;code&gt;tailnum&lt;/code&gt;, and then do &lt;code&gt;summarize&lt;/code&gt;; since we have nothing in the &lt;code&gt;summarize&lt;/code&gt;, the code below just return the gorup.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    group_by(tailnum) %&amp;gt;% 
    summarise()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 1
##   tailnum
##   &amp;lt;chr&amp;gt;  
## 1 N15983 
## 2 N633JB 
## 3 N6705Y 
## 4 N78524 
## 5 N932DL&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can use &lt;code&gt;n()&lt;/code&gt; to count the frequency for each group&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% 
    group_by(tailnum) %&amp;gt;% 
    summarise(n()) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,044 x 2
##    tailnum `n()`
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
##  1 D942DN      4
##  2 N0EGMQ    371
##  3 N10156    153
##  4 N102UW     48
##  5 N103US     46
##  6 N104UW     47
##  7 N10575    289
##  8 N105UW     45
##  9 N107US     41
## 10 N108UW     60
## # ... with 4,034 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or
flights %&amp;gt;% 
    group_by(tailnum) %&amp;gt;% 
    tally()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,044 x 2
##    tailnum     n
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
##  1 D942DN      4
##  2 N0EGMQ    371
##  3 N10156    153
##  4 N102UW     48
##  5 N103US     46
##  6 N104UW     47
##  7 N10575    289
##  8 N105UW     45
##  9 N107US     41
## 10 N108UW     60
## # ... with 4,034 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or
flights %&amp;gt;% 
    count(tailnum)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,044 x 2
##    tailnum     n
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;
##  1 D942DN      4
##  2 N0EGMQ    371
##  3 N10156    153
##  4 N102UW     48
##  5 N103US     46
##  6 N104UW     47
##  7 N10575    289
##  8 N105UW     45
##  9 N107US     41
## 10 N108UW     60
## # ... with 4,034 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% 
    group_by(tailnum) %&amp;gt;% 
    summarise(
        count = n(),
        mean_dist = mean(distance, na.rm = TRUE),
        mean_delay = mean(arr_delay, na.rm = TRUE)
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4,044 x 4
##    tailnum count mean_dist mean_delay
##    &amp;lt;chr&amp;gt;   &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;
##  1 D942DN      4      854.     31.5  
##  2 N0EGMQ    371      676.      9.98 
##  3 N10156    153      758.     12.7  
##  4 N102UW     48      536.      2.94 
##  5 N103US     46      535.     -6.93 
##  6 N104UW     47      535.      1.80 
##  7 N10575    289      520.     20.7  
##  8 N105UW     45      525.     -0.267
##  9 N107US     41      529.     -5.73 
## 10 N108UW     60      534.     -1.25 
## # ... with 4,034 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we first group the data by destination, and for each group of &lt;code&gt;destination&lt;/code&gt;, we count the distinct number of &lt;code&gt;tailnum&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% 
    group_by(dest) %&amp;gt;% 
    summarise(
        planes = n_distinct(tailnum),
        flights = n()
    )&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 105 x 3
##    dest  planes flights
##    &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;
##  1 ABQ      108     254
##  2 ACK       58     265
##  3 ALB      172     439
##  4 ANC        6       8
##  5 ATL     1180   17215
##  6 AUS      993    2439
##  7 AVL      159     275
##  8 BDL      186     443
##  9 BGR       46     375
## 10 BHM       45     297
## # ... with 95 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;group-multiple-variables&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;group multiple variables&lt;/h1&gt;
&lt;p&gt;we can also have multiple groups for the dataset; In this case, we assign it to per_day&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(per_day &amp;lt;- flights %&amp;gt;%
  group_by(year, month, day) %&amp;gt;%
  summarize(flights = n()))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 365 x 4
## # Groups:   year, month [12]
##     year month   day flights
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;
##  1  2013     1     1     842
##  2  2013     1     2     943
##  3  2013     1     3     914
##  4  2013     1     4     915
##  5  2013     1     5     720
##  6  2013     1     6     832
##  7  2013     1     7     933
##  8  2013     1     8     899
##  9  2013     1     9     902
## 10  2013     1    10     932
## # ... with 355 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This time we don’t have any group_by funcition but only the summarize function. Notice that the &lt;code&gt;per_day&lt;/code&gt;data automatically ungroup in &lt;code&gt;day&lt;/code&gt; level. And now it is the original data grouping by &lt;code&gt;year&lt;/code&gt; and &lt;code&gt;month&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(per_month &amp;lt;- per_day %&amp;gt;% 
  summarize(flights = sum(flights)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 12 x 3
## # Groups:   year [1]
##     year month flights
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;
##  1  2013     1   27004
##  2  2013     2   24951
##  3  2013     3   28834
##  4  2013     4   28330
##  5  2013     5   28796
##  6  2013     6   28243
##  7  2013     7   29425
##  8  2013     8   29327
##  9  2013     9   27574
## 10  2013    10   28889
## 11  2013    11   27268
## 12  2013    12   28135&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Follow the same logic, the final summary we have below is grouped by &lt;code&gt;year&lt;/code&gt; variable.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;(per_year &amp;lt;- per_month %&amp;gt;%
  summarize(flights = sum(flights)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##    year flights
##   &amp;lt;int&amp;gt;   &amp;lt;int&amp;gt;
## 1  2013  336776&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below gives the top 3 varible in &lt;code&gt;air_time&lt;/code&gt;; the reason that it gives 3 is there’s 2 replicated value in &lt;code&gt;air_time&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% 
    top_n(3, air_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     2     6      853            900        -7     1542
## 2  2013     3    15     1001           1000         1     1551
## 3  2013     3    17     1006           1000         6     1607
## 4  2013     3    17     1337           1335         2     1937
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% 
    select(air_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 1
##    air_time
##       &amp;lt;dbl&amp;gt;
##  1      227
##  2      227
##  3      160
##  4      183
##  5      116
##  6      150
##  7      158
##  8       53
##  9      140
## 10      138
## # ... with 336,766 more rows&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>General Introduction of Tidyverse Series1</title>
      <link>/post/tidyverse-package-introduction-part1/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidyverse-package-introduction-part1/</guid>
      <description>


&lt;div id=&#34;what-is-tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;What is &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt;?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. This is my most favourite R package ecosystem for data manipulation, and is the reason that I still cannot completely get rid of using R.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To be more specific, It is a collection of R packages which are designed to be used together.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt;, for data visualisation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dplyr&lt;/code&gt;, for data manipulation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tidyr&lt;/code&gt;, for data tidying&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readr&lt;/code&gt;, for data import&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purrr&lt;/code&gt;, for functional programming&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tibble&lt;/code&gt;, for tibbles, a modern re-imagining of data frames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringr&lt;/code&gt;, for strings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forcats&lt;/code&gt;, for factors&lt;/li&gt;
&lt;li&gt;and many other functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;why-tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Why tidyverse?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;There’re a couple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base R functons are often slow and the implemenations sometimes are inconsistent.&lt;/li&gt;
&lt;li&gt;Writing tidyverse function use pip operator &lt;code&gt;%&amp;gt;%&lt;/code&gt; is cleaner and more elegant.&lt;/li&gt;
&lt;li&gt;Lots of convenient functions for data manipulating and warggling helps accelerating data analysis process.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;lets-see-five-base-functions-given-by-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let’s see five base functions given by dplyr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;: picks variables based on their names(Selecr columns). We do not need to add double quote on variable name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: picks cases based on their values; filter rows with some conditions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt;: adds new variables that are functions of existing variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt;: changes the ordering of the rows =&amp;gt; reordering helps for data visualization&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize&lt;/code&gt; or &lt;code&gt;summarise&lt;/code&gt;: reduces multiple values down to a single summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by&lt;/code&gt;: will group data into different categories, and we can add complicated calculation based on this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;obtain-some-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Obtain some data&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First of all, we need some data to work with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(nycflights13) # Please intstall this packages which contains some interating dataset.
flights %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     1     1      517            515         2      830
## 2  2013     1     1      533            529         4      850
## 3  2013     1     1      542            540         2      923
## 4  2013     1     1      544            545        -1     1004
## 5  2013     1     1      554            600        -6      812
## 6  2013     1     1      554            558        -4      740
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data frame with columns information for &lt;code&gt;flight&lt;/code&gt; dataset.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;year, month, day&lt;/code&gt;: Date of departure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dep_time, arr_time&lt;/code&gt;: Actual departure and arrival times (format HHMM or HMM), local tz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sched_dep_time, sched_arr_time&lt;/code&gt;: Scheduled departure and arrival times (format HHMM or HMM), local tz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dep_delay, arr_delay&lt;/code&gt;: Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;carrier&lt;/code&gt;: Two letter carrier abbreviation. See airlines to get name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flight&lt;/code&gt;: Flight number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tailnum&lt;/code&gt;: Plane tail number. See planes for additional metadata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;origin, dest&lt;/code&gt;: Origin and destination. See airports for additional metadata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;air_time&lt;/code&gt;: Amount of time spent in the air, in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;distance&lt;/code&gt;: Distance between airports, in miles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hour, minute&lt;/code&gt;: Time of scheduled departure broken into hour and minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time_hour&lt;/code&gt;: Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;skimr-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Skimr Package&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is a package used to quickly display summary statistics. &lt;code&gt;Skimr&lt;/code&gt; handles different data types and returns a skim_df object which can be included in a tidyverse pipeline or displayed nicely for the human reader. It will shows you a distribution for each variable and outliers which marked with red color.&lt;/p&gt;
&lt;p&gt;here I just use subset of the dataset for the purpose of demonstration.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(skimr)
flight_subset &amp;lt;- flights %&amp;gt;% sample_n(5) # sample_frac, sample_integer
flight_subset %&amp;gt;% skim&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-2&#34;&gt;Table 1: &lt;/span&gt;Data summary&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Piped data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of columns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;_______________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Column type frequency:&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;POSIXct&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;________________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Group variables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;empty&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;whitespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;carrier&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;tailnum&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;origin&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dest&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;year&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;month&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.58&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▃▃▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;day&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;9.10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;23&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▇▃▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dep_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1710.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;376.51&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1114&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1630&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1831&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1855&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2122&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▇▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sched_dep_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1699.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;422.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1019&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1615&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1835&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1900&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2129&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▇▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dep_delay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26.25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▂▁▁▂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;arr_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1940.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;340.34&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1410&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1850&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2023&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2106&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2314&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▇▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sched_arr_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1932.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;376.72&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1337&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1831&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2049&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2124&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2323&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▇▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;arr_delay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25.15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;33&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▁▃▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;flight&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2832.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1320.51&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1211&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1619&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3439&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3833&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4059&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▃▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;air_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;127.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;53.51&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;95&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;102&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;138&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;216&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▂▁▂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;distance&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;820.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;389.45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;529&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;549&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;589&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1020&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1416&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▂▁▂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;hour&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;16&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▃▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;minute&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.52&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;15&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;29&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;35&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▇▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: POSIXct&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;time_hour&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-02-15 10:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-10-23 21:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-06-05 18:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;select-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Select functions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can select columns of the dataset by specifying the name in the &lt;code&gt;select&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(dep_time, arr_time)

flight_subset%&amp;gt;% 
    select(starts_with(&amp;quot;arr_&amp;quot;))# specify the start word # ends_with()

flight_subset %&amp;gt;% 
    select(ends_with(&amp;quot;_time&amp;quot;)) # select all the columns with end word: time

flight_subset %&amp;gt;% 
    select(contains(&amp;quot;dep&amp;quot;)) # select the columns that contains &amp;quot;dep&amp;quot;

flight_subset %&amp;gt;% 
    select(-contains(&amp;quot;dep&amp;quot;)) # we can also put negation sign to select columns otherwise `dep`

# flight_subset %&amp;gt;% 
    # select(!contains(&amp;quot;dep&amp;quot;)) # we cannot use it sine this is not a logical vector, contains(&amp;quot;dep&amp;quot;)` must evaluate to column positions or names, not a logical vector

# Select use - for negation. While Filter use ! since it is logical operator

flight_subset %&amp;gt;% 
    select(dep_time: arr_time) # from dep_time to arr_time

flight_subset %&amp;gt;% 
    select(dep_time, everything()) # reordering , put the dep_time in the very front&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Notice that if you just need one single variable, you could use &lt;code&gt;pull&lt;/code&gt; function. This &lt;code&gt;pull&lt;/code&gt; function will give you a vector. While &lt;code&gt;select&lt;/code&gt; function will give you a dataframe&lt;/li&gt;
&lt;li&gt;And you can use &lt;code&gt;rename&lt;/code&gt; to rename your columns variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pull&lt;/code&gt; function directly gives the vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    pull(dep_time) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2122 1114 1630 1855 1831&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filter Function&lt;/strong&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;) # filter the row with condition

flight_subset %&amp;gt;% 
    filter(distance &amp;gt; 1000)

# note that we are using a single `&amp;amp;` instead of `&amp;amp;&amp;amp;` as in base R
flight_subset %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot; &amp;amp; distance &amp;gt; 100)

flight_subset %&amp;gt;% 
    filter(distance &amp;lt; 500 | distance &amp;gt; 1000) # this is or logical condition

flight_subset %&amp;gt;%
    filter(!between(distance, 500, 1000)) # since it is logical operator we use ! instead of !

# only keep the complete cases
flight_subset %&amp;gt;% 
    filter(complete.cases(flight_subset)) # This helps detect NA value in each row; use ! for negation

flight_subset %&amp;gt;% 
    slice(2:3) # Slice let you choose the rows depends on index.

flight_subset %&amp;gt;% 
    filter(carrier %in% c(&amp;quot;DL&amp;quot;, &amp;quot;UA&amp;quot;))
          #variable      value in columns we wanna pick&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chaining-up-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Chaining up function&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is the my favourite part of tidyverse. We can use &lt;code&gt;%&amp;gt;%&lt;/code&gt; to chain up functions instead of wrapping up lots of functions together. This helps making code seem more elegant and cleaner. Python also has the chainning ability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot; &amp;amp; air_time &amp;gt; 10) %&amp;gt;% 
    rename(air_time_new = air_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   origin air_time_new
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
## 1 JFK             102&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-more-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Some more Example&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this example we first select &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;air_time&lt;/code&gt;, and we filter out the row when &lt;code&gt;origin == &#34;JFK&#34;&lt;/code&gt; and &lt;code&gt;air_time&lt;/code&gt; &amp;lt; &lt;code&gt;mean(air_time)&lt;/code&gt;. Here &lt;code&gt;mean(air_time)&lt;/code&gt; is the mean of air_time in the flight_subset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;, air_time &amp;lt; mean(air_time, na.rm = TRUE )) #compare the mean with air_time in flight_subset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   origin air_time
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 JFK         102&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it is difficult to understand, we can sperate above into two steps. And below gives the same result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Step 1
mean_air_time = flight_subset %&amp;gt;% 
    pull(air_time) %&amp;gt;% 
    mean(na.rm = TRUE)

# Step 2
flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;, air_time &amp;lt; mean_air_time) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   origin air_time
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 JFK         102&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can use &lt;code&gt;.&lt;/code&gt; to represent the working data frame. These two below are the same&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(complete.cases(.))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013    10    23     2122           2129        -7     2314
## 2  2013     2    15     1114           1019        55     1410
## 3  2013     8    29     1630           1615        15     1850
## 4  2013     2    15     1855           1900        -5     2106
## 5  2013     6     5     1831           1835        -4     2023
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(complete.cases(flight_subset))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013    10    23     2122           2129        -7     2314
## 2  2013     2    15     1114           1019        55     1410
## 3  2013     8    29     1630           1615        15     1850
## 4  2013     2    15     1855           1900        -5     2106
## 5  2013     6     5     1831           1835        -4     2023
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Just in case for avoiding cofusion; here is the summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x %&amp;gt;% f() is equivalent to f(x)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(.) is also equivalent to f(x)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(y) is equivalent to f(x, y)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(., y) is equivalent to f(x, y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To have a concrete example, here we use &lt;code&gt;%&amp;gt;%&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; to compute binomial coefficients&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 5
x &amp;lt;- 0:5
n %&amp;gt;% choose(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or

x %&amp;gt;% choose(n, .) # . represent x, which is the vector we are working on&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(n=5, x = 0:5) %&amp;gt;% {
    choose(.$n, .$x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# again . represents the thing we are working on with. Here is the list object =&amp;gt; list(n-5, x=0:5), and let&amp;#39;s call it A
# And then we pick out variable n and x from list A&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse Join Function Part-2</title>
      <link>/post/tidyverse-join-function-part-2/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidyverse-join-function-part-2/</guid>
      <description>


&lt;p&gt;In the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;Part1 Introducton for Join function family in tidyverse family&lt;/a&gt;, we explored some useful functions by exploring some toy examples. In this post, we go further with some slightly more complicated dataset. By doing so helps us have a deeper unstanding how join family works.&lt;/p&gt;
&lt;p&gt;First part will just go over the function a liitle bit with a different dataset, and second part will practice in the more complicated datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes &amp;lt;- tibble::tribble(
       ~name, ~alignment,  ~gender,          ~publisher,
   &amp;quot;Magneto&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,            &amp;quot;Marvel&amp;quot;,
     &amp;quot;Storm&amp;quot;,     &amp;quot;good&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
  &amp;quot;Mystique&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
    &amp;quot;Batman&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
     &amp;quot;Joker&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
  &amp;quot;Catwoman&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,                &amp;quot;DC&amp;quot;,
   &amp;quot;Hellboy&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;, &amp;quot;Dark Horse Comics&amp;quot;
  )

publishers &amp;lt;- tibble::tribble(
  ~publisher, ~yr_founded,
        &amp;quot;DC&amp;quot;,       1934L,
    &amp;quot;Marvel&amp;quot;,       1939L,
     &amp;quot;Image&amp;quot;,       1992L
  )

superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inner Join&lt;/h2&gt;
&lt;p&gt;As a reminder, &lt;code&gt;inner_join(x, y)&lt;/code&gt; returns all matched rows and columns between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; tables. Notice that rows from &lt;code&gt;publishers&lt;/code&gt; will duplicate themselves for matching the rows from &lt;code&gt;superheros&lt;/code&gt; in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    inner_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   name     alignment gender publisher yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel          1939
## 2 Storm    good      female Marvel          1939
## 3 Mystique bad       female Marvel          1939
## 4 Batman   good      male   DC              1934
## 5 Joker    bad       male   DC              1934
## 6 Catwoman bad       female DC              1934&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Left Join&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;left_join(x, y)&lt;/code&gt;: Return all rows from x, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    left_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Semi join&lt;/h2&gt;
&lt;p&gt;semi_join(x, y): Return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x. This is a filtering join.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;superheros&lt;/code&gt; is the baseline table&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    semi_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   name     alignment gender publisher
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    
## 1 Magneto  bad       male   Marvel   
## 2 Storm    good      female Marvel   
## 3 Mystique bad       female Marvel   
## 4 Batman   good      male   DC       
## 5 Joker    bad       male   DC       
## 6 Catwoman bad       female DC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Full Join&lt;/h2&gt;
&lt;p&gt;full_join(x, y): Return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    full_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA
## 8 &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;   Image                   1992&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, all the logic basically follows what we have talked in the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;previous post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if column names in &lt;code&gt;table A&lt;/code&gt; and &lt;code&gt;table B&lt;/code&gt; are the same. How we gonna do for this situation.&lt;/li&gt;
&lt;li&gt;what if the colname we wanna join has different names in two tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s check out the different datatset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts = readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/cb649926d41ce73490a9bb710e1501a273061723/parts.rds&amp;quot;))

parts_categories &amp;lt;- readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/30fc459770c89e46cce9cce99752ca95fb1d06fe/part_categories.rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;glimpse-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;glimpse the data&lt;/h2&gt;
&lt;p&gt;Here we notice that both &lt;code&gt;table parts&lt;/code&gt; and &lt;code&gt;table parts_categories&lt;/code&gt; have col name called &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   part_num name                                                 part_cat_id
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                                      &amp;lt;dbl&amp;gt;
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow House Print              1
## 2 0902     Baseplate 16 x 24 with Set 080 Small White House Pr~           1
## 3 0903     Baseplate 16 x 24 with Set 080 Red House Print                 1
## 4 0904     Baseplate 16 x 24 with Set 080 Large White House Pr~           1
## 5 1        Homemaker Bookcase 2 x 4 x 4                                   7
## 6 10016414 Sticker Sheet #1 for 41055-1                                  58&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts_categories %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##      id name                   
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  
## 1     1 Baseplates             
## 2     3 Bricks Sloped          
## 3     4 Duplo, Quatro and Primo
## 4     5 Bricks Special         
## 5     6 Bricks Wedged          
## 6     7 Containers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s pratcice. In this case we are told that &lt;code&gt;part_cat_id and&lt;/code&gt; from &lt;code&gt;parts&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; from &lt;code&gt;parts_categories&lt;/code&gt; are the two columns we want to join. In this case we need to specify which two colnames we wanna join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;%
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;)) %&amp;gt;% head # we need double quote in colname&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name.x                                     part_cat_id name.y   
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                            &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow Hou~           1 Baseplat~
## 2 0902     Baseplate 16 x 24 with Set 080 Small Whit~           1 Baseplat~
## 3 0903     Baseplate 16 x 24 with Set 080 Red House ~           1 Baseplat~
## 4 0904     Baseplate 16 x 24 with Set 080 Large Whit~           1 Baseplat~
## 5 1        Homemaker Bookcase 2 x 4 x 4                         7 Containe~
## 6 10016414 Sticker Sheet #1 for 41055-1                        58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we find that &lt;code&gt;inner join function&lt;/code&gt; aissgned two different names to the same colname from two table: &lt;code&gt;name.x&lt;/code&gt; and &lt;code&gt;name.y&lt;/code&gt;. we can specify the suffox in the name by doing so.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;%
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;),
               suffix = c(&amp;quot;_parts&amp;quot;, &amp;quot;_part_categoroes&amp;quot;)) %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name_parts                        part_cat_id name_part_categor~
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             
## 1 0901     Baseplate 16 x 30 with Set 080 Y~           1 Baseplates        
## 2 0902     Baseplate 16 x 24 with Set 080 S~           1 Baseplates        
## 3 0903     Baseplate 16 x 24 with Set 080 R~           1 Baseplates        
## 4 0904     Baseplate 16 x 24 with Set 080 L~           1 Baseplates        
## 5 1        Homemaker Bookcase 2 x 4 x 4                7 Containers        
## 6 10016414 Sticker Sheet #1 for 41055-1               58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the new table above keeps &lt;code&gt;part_cat_id&lt;/code&gt; as column name since &lt;code&gt;parts table&lt;/code&gt; works as the baseline table.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse Join function Part-1</title>
      <link>/post/test/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/test/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post serves as a learning record and practice with tidyverse package which is super awesome and convenient for data exploration and manipulation. PLease also check out this very help tutorial: &lt;a href=&#34;https://stat545.com/join-cheatsheet.html&#34; class=&#34;uri&#34;&gt;https://stat545.com/join-cheatsheet.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s explore some fucntions in tidyverse for joining tables. And these functions basically follow same idea in SQL.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inner Join (inner_join)&lt;/li&gt;
&lt;li&gt;Left Join (left_join)&lt;/li&gt;
&lt;li&gt;Right Join (right_join)&lt;/li&gt;
&lt;li&gt;Full Join (full_join)&lt;/li&gt;
&lt;li&gt;Semi Join (semi_join)&lt;/li&gt;
&lt;li&gt;Anti Join (anti_join)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may ask we already have SQL for doing this and why you need Tidyverse to do the same thing. This is because there’re lots of time you don’t have permissions to do so in database, or don’t want to ETL for one-off(single time) analysis, then utilising dplyr and R to join the data can prove to be more efficient.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA = tibble(
    CustomerID =  1:3,
    NumberOfOrder = c(5, 10, 4),
    TotalVolumeOrder = c(500, 240, 40),
    AverageVolumeOrder = c(100,24, 10),
    LastOrderDate = ymd(c(&amp;quot;2017-10-01&amp;quot;,&amp;quot;2019-12-31&amp;quot;, &amp;quot;2014-10-10&amp;quot;))
)

# or you can create a tibble like this using tribble
tableB &amp;lt;- tibble::tribble(
    
    ~CustomerID,  ~Age,  ~Gender,   ~FavouriteProduct,
    1L,           20L,       &amp;quot;Male&amp;quot;,   &amp;quot;T-Shirt&amp;quot;,
    2L,           23L,       &amp;quot;Female&amp;quot;, &amp;quot;Legging&amp;quot;,
    4L,           21L,       &amp;quot;Male&amp;quot;,   &amp;quot;Jumpers&amp;quot;
)

tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Inner Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;inner join&lt;/code&gt; will join same shared columns together within two tables, and we need to specify which column we wanna join. And here we use &lt;code&gt;CutomerID&lt;/code&gt;for joining two tables together. For example, if we decided to join on Customer ID, the new table would contain rows 1 and 2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;CustomerID&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;inner join&lt;/code&gt; makes sense when two columns are shared in both tables. Code below failed since join column &lt;code&gt;NumberOfOrder&lt;/code&gt; which is missing from RHS =&amp;gt; this is the tableB(RHS)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;NumberOfOrder&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `by` can&amp;#39;t contain join column `NumberOfOrder` which is missing from RHS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Left Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Left join&lt;/code&gt; will also combine two tables. However for this timee &lt;code&gt;Left join&lt;/code&gt; will not make any change on table on the left. This also means that left table works as a baseline and we can add other columns from right table to the baseline table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    left_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          3             4               40               10 2014-10-10   
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have some &lt;code&gt;NA&lt;/code&gt; Values since &lt;code&gt;CustomerID&lt;/code&gt; = 3 in &lt;code&gt;Left table&lt;/code&gt; doesn’t have information for Age, Gender, FavouriteProduct columns&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;right-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Right Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And &lt;code&gt;Right Join&lt;/code&gt; basically follows the same logic which is the opposite of &lt;code&gt;left join&lt;/code&gt; functtion&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    right_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          4            NA               NA               NA NA           
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Full Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Notice that table given by &lt;code&gt;left join&lt;/code&gt; and &lt;code&gt;right join&lt;/code&gt; are subset of table given by &lt;code&gt;Full Join&lt;/code&gt;. &lt;code&gt;Full join&lt;/code&gt; includes all the columns in tableA and tableB&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    full_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          3             4               40               10 2014-10-10   
## 4          4            NA               NA               NA NA           
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;anti-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Anti Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As we have seen when looking at creating training &amp;amp; test datasets for machine learning in dplyr, anti joins are super helpful. An anti join will return all of the rows from the first table where there are not matching values from the second. The new anti join table will only contain data from the first table, based on the join predicate listed above. An example of this is shown below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    anti_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically &lt;code&gt;table A&lt;/code&gt; works as a baseline table, and &lt;code&gt;anti_join&lt;/code&gt; function will remove the row, which also appears in the &lt;code&gt;table B&lt;/code&gt;, and return the remained row here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Semi-join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And the last one is &lt;code&gt;Semi-join&lt;/code&gt;. Let’s see how it works&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    semi_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works similar as &lt;code&gt;inner join&lt;/code&gt; since it has two shared rows here. But we also notice that tableA works as baseline table and the new table does not have columns coming from tableB. we can think of it as we first do the &lt;code&gt;inner_join&lt;/code&gt; to have a &lt;code&gt;new_table&lt;/code&gt;, and then remove all the columns originating from &lt;code&gt;table B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now check out &lt;a href=&#34;https://yetao7977.netlify.com/post/tidyverse-join-function-part-2/&#34;&gt;part2 for join family in tidyverse&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
