<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tidyverse | Ye Tao (Janson)</title>
    <link>/categories/tidyverse/</link>
      <atom:link href="/categories/tidyverse/index.xml" rel="self" type="application/rss+xml" />
    <description>Tidyverse</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>2020</copyright><lastBuildDate>Wed, 22 Jan 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>Tidyverse</title>
      <link>/categories/tidyverse/</link>
    </image>
    
    <item>
      <title>Data Tidying with Tidyverse in R</title>
      <link>/post/data-tidying-with-tidyverse-in-r/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/data-tidying-with-tidyverse-in-r/</guid>
      <description>


&lt;div id=&#34;coming-soon&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Coming Soon&lt;/strong&gt;&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>General Introduction of Tidyverse Series2</title>
      <link>/post/general-introduction-of-tidyverse-series2/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/general-introduction-of-tidyverse-series2/</guid>
      <description>


&lt;div id=&#34;tidyverse-introduction-part-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Tidyverse Introduction Part 2&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;This is part 2 of the Tidyverse Series; In this post, we continue to explore some extremely useful tools for data analysis&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(nycflights13) # Please intstall this packages which contains some interating dataset.
flight_subset &amp;lt;- 
    flights %&amp;gt;% sample_n(5)


flight_subset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013    12    26     1337           1300        37     1448
## 2  2013     5    24      856            900        -4     1006
## 3  2013     3    24      733            730         3      957
## 4  2013     7     5     1452           1500        -8     1601
## 5  2013    12    25      742            745        -3     1041
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;mutate-create-new-variable&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Mutate&lt;/strong&gt; : Create new variable&lt;/h2&gt;
&lt;p&gt;We can use &lt;code&gt;mutate&lt;/code&gt; to create new variable, and then add them to the end of the origain data set&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;dep_delay&lt;/code&gt;, &lt;code&gt;arr_delay:&lt;/code&gt; Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    mutate(gain = arr_delay-dep_delay, # minutes for getting ealier or later
           speed = distance / air_time * 60, # in miles/hrs
            gain_per_hour = gain / (air_time/60)) # we can also refer the variable we just created in the 3 lines above; In this case, it is variable gain&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 22
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013    12    26     1337           1300        37     1448
## 2  2013     5    24      856            900        -4     1006
## 3  2013     3    24      733            730         3      957
## 4  2013     7     5     1452           1500        -8     1601
## 5  2013    12    25      742            745        -3     1041
## # ... with 15 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;, gain &amp;lt;dbl&amp;gt;, speed &amp;lt;dbl&amp;gt;, gain_per_hour &amp;lt;dbl&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;conditional-mutation&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Conditional Mutation&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Now, let’s explore some advanced use of mutate and transumate; Here is 3 ways we can use for recode variable name.&lt;/p&gt;
&lt;p&gt;Norice that &lt;code&gt;transumate&lt;/code&gt; has the same functionality with &lt;code&gt;mutate&lt;/code&gt;, but the only difference is that &lt;code&gt;transmuate&lt;/code&gt; will give the related column, while &lt;code&gt;mutate&lt;/code&gt; will give all the variables plus new variable you just created.&lt;/p&gt;
&lt;div id=&#34;method-1-ifelse&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 1 ifelse&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    transmute(arr_delay = arr_delay,
              status = ifelse(arr_delay &amp;gt; 0, &amp;quot;delayed&amp;quot;, &amp;quot;On Time&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   arr_delay status 
##       &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;  
## 1        23 delayed
## 2       -16 On Time
## 3        -8 On Time
## 4       -11 On Time
## 5       -19 On Time&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;method-2-case_when&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 2 Case_when&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Here is another way we can write with the &lt;code&gt;ifelse&lt;/code&gt; funciton. And this time, we can handle mutiple conditions&lt;/p&gt;
&lt;p&gt;And this is every similar with if else statement in python, which makes the code very readable; Notice that the order for the ifelse statement matters, and &lt;code&gt;TRUE ~ &#34;long&#34;&lt;/code&gt; means that whatever remained will be recode as &lt;code&gt;longer&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_distance &amp;lt;- flight_subset %&amp;gt;% 
    transmute(distance, 
              distance_type = case_when(
                  distance &amp;lt; 500 ~ &amp;quot;short&amp;quot;, # if
                  distance &amp;lt; 1000 ~ &amp;quot;mid&amp;quot;,  # elif
                  TRUE ~ &amp;quot;long&amp;quot;             # else
              ))

flight_distance&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   distance distance_type
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;        
## 1      719 mid          
## 2      214 short        
## 3     1620 long         
## 4      184 short        
## 5     1389 long&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And the code above remind me of the &lt;code&gt;numpy&lt;/code&gt; package in Python. In &lt;code&gt;numpy&lt;/code&gt;, we have &lt;code&gt;numpy_where&lt;/code&gt; function helps to vectorize and accelerate the processing speed; and it would be much quicker than &lt;code&gt;apply&lt;/code&gt; function in python, and the format of code is eaxctly the same as above; please check out this &lt;a href=&#34;https://mp.weixin.qq.com/s?__biz=MzAxNTc0Mjg0Mg==&amp;amp;mid=2653296308&amp;amp;idx=1&amp;amp;sn=254bcaa023ac25e883a2b2b44293b3f3&amp;amp;chksm=802dd4a1b75a5db7d5b2955e3340eb6ab9095691b77fc8186f0a6f28b3e083779a6d8771ce5a&amp;amp;mpshare=1&amp;amp;scene=24&amp;amp;srcid=&amp;amp;sharer_sharetime=1578641340491&amp;amp;sharer_shareid=955e84dae4795ad4e079035b644897e4&amp;amp;key=e1c2dfa459d4b974c6dd352bb5e6fed432504266a86ed3fd459b09fa751cceec67cf1fb3264d3398971de102cf0d57692ff578d09e543bf3ca7907d569e30b148f293e478a9bf5550adfa2206159fcd9&amp;amp;ascene=14&amp;amp;uin=MTIxODU1NTA0NA%3D%3D&amp;amp;devicetype=Windows+10&amp;amp;version=6208006f&amp;amp;lang=zh_CN&amp;amp;exportkey=AS6hBBImDHRn3FsC9OovRLo%3D&amp;amp;pass_ticket=zyB9BMfXJt76KOucgp6FR47eJMSs9WN%2FGL8EM2wRAkmgb8cWCWPiZ7s9zbFo%2FePb&#34;&gt;article for more information in python.&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;method-3-recoding&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;&lt;strong&gt;Method 3 Recoding&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_distance %&amp;gt;% mutate(distance_type = recode(distance_type,
            &amp;quot;long&amp;quot; = &amp;quot;long_distance&amp;quot;, 
            &amp;quot;mid&amp;quot; = &amp;quot;mid_distance&amp;quot;,
            &amp;quot;short&amp;quot; = &amp;quot;short _distance&amp;quot;)) # here we do need necessarily double quote for long, mid, short&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 2
##   distance distance_type  
##      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;          
## 1      719 mid_distance   
## 2      214 short _distance
## 3     1620 long_distance  
## 4      184 short _distance
## 5     1389 long_distance&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;arrange-changes-the-ordering-of-the-rows&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;arrange&lt;/code&gt;: changes the ordering of the rows&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% arrange(year, month, day)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flights %&amp;gt;% arrange(desc(dep_delay))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
##  1  2013     1     9      641            900      1301     1242
##  2  2013     6    15     1432           1935      1137     1607
##  3  2013     1    10     1121           1635      1126     1239
##  4  2013     9    20     1139           1845      1014     1457
##  5  2013     7    22      845           1600      1005     1044
##  6  2013     4    10     1100           1900       960     1342
##  7  2013     3    17     2321            810       911      135
##  8  2013     6    27      959           1900       899     1236
##  9  2013     7    22     2257            759       898      121
## 10  2013    12     5      756           1700       896     1058
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &amp;lt;int&amp;gt;,
## #   arr_delay &amp;lt;dbl&amp;gt;, carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;,
## #   origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;, air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;,
## #   minute &amp;lt;dbl&amp;gt;, time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summarize-and-group_by-operations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;code&gt;summarize&lt;/code&gt; and &lt;code&gt;group_by&lt;/code&gt; operations&lt;/h2&gt;
&lt;p&gt;In this case, we first goup all our data into different subgroup based on &lt;code&gt;tailnum&lt;/code&gt;, and then do &lt;code&gt;summarize&lt;/code&gt;; since we have nothing in the &lt;code&gt;summarize&lt;/code&gt;, the code below just return the gorup.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    group_by(tailnum) %&amp;gt;% 
    summarise()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 1
##   tailnum
##   &amp;lt;chr&amp;gt;  
## 1 N14115 
## 2 N3KAAA 
## 3 N746UW 
## 4 N936WN 
## 5 N965UW&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>General Introduction of Tidyverse Series1</title>
      <link>/post/tidyverse-package-introduction-part1/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidyverse-package-introduction-part1/</guid>
      <description>


&lt;div id=&#34;what-is-tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;What is &lt;a href=&#34;https://www.tidyverse.org/&#34;&gt;tidyverse&lt;/a&gt;?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. This is my most favourite R package ecosystem for data manipulation, and is the reason that I still cannot completely get rid of using R.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To be more specific, It is a collection of R packages which are designed to be used together.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt;, for data visualisation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dplyr&lt;/code&gt;, for data manipulation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tidyr&lt;/code&gt;, for data tidying&lt;/li&gt;
&lt;li&gt;&lt;code&gt;readr&lt;/code&gt;, for data import&lt;/li&gt;
&lt;li&gt;&lt;code&gt;purrr&lt;/code&gt;, for functional programming&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tibble&lt;/code&gt;, for tibbles, a modern re-imagining of data frames&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stringr&lt;/code&gt;, for strings&lt;/li&gt;
&lt;li&gt;&lt;code&gt;forcats&lt;/code&gt;, for factors&lt;/li&gt;
&lt;li&gt;and many other functions&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;why-tidyverse&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;&lt;strong&gt;Why tidyverse?&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;There’re a couple reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Base R functons are often slow and the implemenations sometimes are inconsistent.&lt;/li&gt;
&lt;li&gt;Writing tidyverse function use pip operator &lt;code&gt;%&amp;gt;%&lt;/code&gt; is cleaner and more elegant.&lt;/li&gt;
&lt;li&gt;Lots of convenient functions for data manipulating and warggling helps accelerating data analysis process.&lt;/li&gt;
&lt;/ul&gt;
&lt;div id=&#34;lets-see-five-base-functions-given-by-dplyr&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let’s see five base functions given by dplyr&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt;: picks variables based on their names(Selecr columns). We do not need to add double quote on variable name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;: picks cases based on their values; filter rows with some conditions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mutate&lt;/code&gt;: adds new variables that are functions of existing variables&lt;/li&gt;
&lt;li&gt;&lt;code&gt;arrange&lt;/code&gt;: changes the ordering of the rows =&amp;gt; reordering helps for data visualization&lt;/li&gt;
&lt;li&gt;&lt;code&gt;summarize&lt;/code&gt; or &lt;code&gt;summarise&lt;/code&gt;: reduces multiple values down to a single summary&lt;/li&gt;
&lt;li&gt;&lt;code&gt;group_by&lt;/code&gt;: will group data into different categories, and we can add complicated calculation based on this function.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;obtain-some-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Obtain some data&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;First of all, we need some data to work with.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(nycflights13) # Please intstall this packages which contains some interating dataset.
flights %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     1     1      517            515         2      830
## 2  2013     1     1      533            529         4      850
## 3  2013     1     1      542            540         2      923
## 4  2013     1     1      544            545        -1     1004
## 5  2013     1     1      554            600        -6      812
## 6  2013     1     1      554            558        -4      740
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data frame with columns information for &lt;code&gt;flight&lt;/code&gt; dataset.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;year, month, day&lt;/code&gt;: Date of departure.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dep_time, arr_time&lt;/code&gt;: Actual departure and arrival times (format HHMM or HMM), local tz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sched_dep_time, sched_arr_time&lt;/code&gt;: Scheduled departure and arrival times (format HHMM or HMM), local tz.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dep_delay, arr_delay&lt;/code&gt;: Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;carrier&lt;/code&gt;: Two letter carrier abbreviation. See airlines to get name.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;flight&lt;/code&gt;: Flight number.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;tailnum&lt;/code&gt;: Plane tail number. See planes for additional metadata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;origin, dest&lt;/code&gt;: Origin and destination. See airports for additional metadata.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;air_time&lt;/code&gt;: Amount of time spent in the air, in minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;distance&lt;/code&gt;: Distance between airports, in miles.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;hour, minute&lt;/code&gt;: Time of scheduled departure broken into hour and minutes.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time_hour&lt;/code&gt;: Scheduled date and hour of the flight as a POSIXct date. Along with origin, can be used to join flights data to weather data.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div id=&#34;skimr-package&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Skimr Package&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is a package used to quickly display summary statistics. &lt;code&gt;Skimr&lt;/code&gt; handles different data types and returns a skim_df object which can be included in a tidyverse pipeline or displayed nicely for the human reader. It will shows you a distribution for each variable and outliers which marked with red color.&lt;/p&gt;
&lt;p&gt;here I just use subset of the dataset for the purpose of demonstration.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(skimr)
flight_subset &amp;lt;- flights %&amp;gt;% sample_n(5) # sample_frac, sample_integer
flight_subset %&amp;gt;% skim&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;caption&gt;&lt;span id=&#34;tab:unnamed-chunk-2&#34;&gt;Table 1: &lt;/span&gt;Data summary&lt;/caption&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Name&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Piped data&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of rows&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Number of columns&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;_______________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Column type frequency:&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;character&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;numeric&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;POSIXct&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;________________________&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;Group variables&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;None&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: character&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;empty&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;whitespace&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;carrier&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;tailnum&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;origin&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dest&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: numeric&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;mean&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;sd&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p0&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p25&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p50&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p75&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;p100&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;hist&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;year&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0.00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2013&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▁▁▇▁▁&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;month&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.21&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▂▁▇▁▂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;day&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;10.85&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;30&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▃▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dep_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1429.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;440.87&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;826&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1434&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1752&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1936&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▃▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sched_dep_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1432.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;444.35&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;825&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1200&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1437&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1755&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1945&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▃▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;dep_delay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-2.8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3.90&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-9&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-3&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▇▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;arr_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1663.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;457.41&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1044&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1502&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1536&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2103&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▇▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;sched_arr_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1655.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;428.27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1104&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1455&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1544&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2045&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2130&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▃▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;arr_delay&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-0.6&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;28.57&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-27&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-20&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;-8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;7&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▃▃▁▃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;flight&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2050.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1701.26&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;785&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;857&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;863&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3374&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4372&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▁▂▂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;air_time&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;182.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;129.28&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;42&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;69&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;176&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;294&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;330&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;distance&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1387.2&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1076.82&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;199&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;427&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1389&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2446&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2475&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▇▁▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;hour&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14.0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;4.30&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;8&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;14&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;17&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;19&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▃▃▁▇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;minute&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;32.4&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;21.18&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;25&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;37&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;45&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;55&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;▃▁▃▃▇&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Variable type: POSIXct&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;skim_variable&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_missing&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;complete_rate&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;min&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;max&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;median&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;n_unique&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;time_hour&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;0&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-02-14 14:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-11-30 19:00:00&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;2013-06-26 17:00:00&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div id=&#34;select-functions&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Select functions&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;You can select columns of the dataset by specifying the name in the &lt;code&gt;select&lt;/code&gt; function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(dep_time, arr_time)

flight_subset%&amp;gt;% 
    select(starts_with(&amp;quot;arr_&amp;quot;))# specify the start word # ends_with()

flight_subset %&amp;gt;% 
    select(ends_with(&amp;quot;_time&amp;quot;)) # select all the columns with end word: time

flight_subset %&amp;gt;% 
    select(contains(&amp;quot;dep&amp;quot;)) # select the columns that contains &amp;quot;dep&amp;quot;

flight_subset %&amp;gt;% 
    select(-contains(&amp;quot;dep&amp;quot;)) # we can also put negation sign to select columns otherwise `dep`

# flight_subset %&amp;gt;% 
    # select(!contains(&amp;quot;dep&amp;quot;)) # we cannot use it sine this is not a logical vector, contains(&amp;quot;dep&amp;quot;)` must evaluate to column positions or names, not a logical vector

# Select use - for negation. While Filter use ! since it is logical operator

flight_subset %&amp;gt;% 
    select(dep_time: arr_time) # from dep_time to arr_time

flight_subset %&amp;gt;% 
    select(dep_time, everything()) # reordering , put the dep_time in the very front&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Notice that if you just need one single variable, you could use &lt;code&gt;pull&lt;/code&gt; function. This &lt;code&gt;pull&lt;/code&gt; function will give you a vector. While &lt;code&gt;select&lt;/code&gt; function will give you a dataframe&lt;/li&gt;
&lt;li&gt;And you can use &lt;code&gt;rename&lt;/code&gt; to rename your columns variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pull&lt;/code&gt; function directly gives the vector.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    pull(dep_time) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1434 1752 1936  826 1200&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;filter-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Filter Function&lt;/strong&gt;&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;) # filter the row with condition

flight_subset %&amp;gt;% 
    filter(distance &amp;gt; 1000)

# note that we are using a single `&amp;amp;` instead of `&amp;amp;&amp;amp;` as in base R
flight_subset %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot; &amp;amp; distance &amp;gt; 100)

flight_subset %&amp;gt;% 
    filter(distance &amp;lt; 500 | distance &amp;gt; 1000) # this is or logical condition

flight_subset %&amp;gt;%
    filter(!between(distance, 500, 1000)) # since it is logical operator we use ! instead of !

# only keep the complete cases
flight_subset %&amp;gt;% 
    filter(complete.cases(flight_subset)) # This helps detect NA value in each row; use ! for negation

flight_subset %&amp;gt;% 
    slice(2:3) # Slice let you choose the rows depends on index.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;chaining-up-function&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Chaining up function&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This is the my favourite part of tidyverse. We can use &lt;code&gt;%&amp;gt;%&lt;/code&gt; to chain up functions instead of wrapping up lots of functions together. This helps making code seem more elegant and cleaner. Python also has the chainning ability.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot; &amp;amp; air_time &amp;gt; 10) %&amp;gt;% 
    rename(air_time_new = air_time)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   origin air_time_new
##   &amp;lt;chr&amp;gt;         &amp;lt;dbl&amp;gt;
## 1 JFK              69
## 2 JFK             294
## 3 JFK             330&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;some-more-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Some more Example&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;In this example we first select &lt;code&gt;origin&lt;/code&gt; and &lt;code&gt;air_time&lt;/code&gt;, and we filter out the row when &lt;code&gt;origin == &#34;JFK&#34;&lt;/code&gt; and &lt;code&gt;air_time&lt;/code&gt; &amp;lt; &lt;code&gt;mean(air_time)&lt;/code&gt;. Here &lt;code&gt;mean(air_time)&lt;/code&gt; is the mean of air_time in the flight_subset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;, air_time &amp;lt; mean(air_time, na.rm = TRUE )) #compare the mean with air_time in flight_subset&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   origin air_time
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 JFK          69&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If it is difficult to understand, we can sperate above into two steps. And below gives the same result.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Step 1
mean_air_time = flight_subset %&amp;gt;% 
    pull(air_time) %&amp;gt;% 
    mean(na.rm = TRUE)

# Step 2
flight_subset %&amp;gt;% 
    select(origin, air_time) %&amp;gt;% 
    filter(origin == &amp;quot;JFK&amp;quot;, air_time &amp;lt; mean_air_time) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 2
##   origin air_time
##   &amp;lt;chr&amp;gt;     &amp;lt;dbl&amp;gt;
## 1 JFK          69&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can use &lt;code&gt;.&lt;/code&gt; to represent the working data frame. These two below are the same&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(complete.cases(.))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     2    14     1434           1437        -3     1536
## 2  2013     6    26     1752           1755        -3     2130
## 3  2013    11    30     1936           1945        -9     2103
## 4  2013     7     3      826            825         1     1044
## 5  2013     6    13     1200           1200         0     1502
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;flight_subset %&amp;gt;% 
    filter(complete.cases(flight_subset))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 5 x 19
##    year month   day dep_time sched_dep_time dep_delay arr_time
##   &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;    &amp;lt;int&amp;gt;          &amp;lt;int&amp;gt;     &amp;lt;dbl&amp;gt;    &amp;lt;int&amp;gt;
## 1  2013     2    14     1434           1437        -3     1536
## 2  2013     6    26     1752           1755        -3     2130
## 3  2013    11    30     1936           1945        -9     2103
## 4  2013     7     3      826            825         1     1044
## 5  2013     6    13     1200           1200         0     1502
## # ... with 12 more variables: sched_arr_time &amp;lt;int&amp;gt;, arr_delay &amp;lt;dbl&amp;gt;,
## #   carrier &amp;lt;chr&amp;gt;, flight &amp;lt;int&amp;gt;, tailnum &amp;lt;chr&amp;gt;, origin &amp;lt;chr&amp;gt;, dest &amp;lt;chr&amp;gt;,
## #   air_time &amp;lt;dbl&amp;gt;, distance &amp;lt;dbl&amp;gt;, hour &amp;lt;dbl&amp;gt;, minute &amp;lt;dbl&amp;gt;,
## #   time_hour &amp;lt;dttm&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;summary&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Just in case for avoiding cofusion; here is the summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x %&amp;gt;% f() is equivalent to f(x)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(.) is also equivalent to f(x)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(y) is equivalent to f(x, y)&lt;/li&gt;
&lt;li&gt;x %&amp;gt;% f(., y) is equivalent to f(x, y)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To have a concrete example, here we use &lt;code&gt;%&amp;gt;%&lt;/code&gt; and &lt;code&gt;.&lt;/code&gt; to compute binomial coefficients&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 5
x &amp;lt;- 0:5
n %&amp;gt;% choose(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# or

x %&amp;gt;% choose(n, .) # . represent x, which is the vector we are working on&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list(n=5, x = 0:5) %&amp;gt;% {
    choose(.$n, .$x)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  1  5 10 10  5  1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# again . represents the thing we are working on with. Here is the list object =&amp;gt; list(n-5, x=0:5), and let&amp;#39;s call it A
# And then we pick out variable n and x from list A&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse Join Function Part-2</title>
      <link>/post/tidyverse-join-function-part-2/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/tidyverse-join-function-part-2/</guid>
      <description>


&lt;p&gt;In the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;Part1 Introducton for Join function family in tidyverse family&lt;/a&gt;, we explored some useful functions by exploring some toy examples. In this post, we go further with some slightly more complicated dataset. By doing so helps us have a deeper unstanding how join family works.&lt;/p&gt;
&lt;p&gt;First part will just go over the function a liitle bit with a different dataset, and second part will practice in the more complicated datasets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The Data&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes &amp;lt;- tibble::tribble(
       ~name, ~alignment,  ~gender,          ~publisher,
   &amp;quot;Magneto&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,            &amp;quot;Marvel&amp;quot;,
     &amp;quot;Storm&amp;quot;,     &amp;quot;good&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
  &amp;quot;Mystique&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,            &amp;quot;Marvel&amp;quot;,
    &amp;quot;Batman&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
     &amp;quot;Joker&amp;quot;,      &amp;quot;bad&amp;quot;,   &amp;quot;male&amp;quot;,                &amp;quot;DC&amp;quot;,
  &amp;quot;Catwoman&amp;quot;,      &amp;quot;bad&amp;quot;, &amp;quot;female&amp;quot;,                &amp;quot;DC&amp;quot;,
   &amp;quot;Hellboy&amp;quot;,     &amp;quot;good&amp;quot;,   &amp;quot;male&amp;quot;, &amp;quot;Dark Horse Comics&amp;quot;
  )

publishers &amp;lt;- tibble::tribble(
  ~publisher, ~yr_founded,
        &amp;quot;DC&amp;quot;,       1934L,
    &amp;quot;Marvel&amp;quot;,       1939L,
     &amp;quot;Image&amp;quot;,       1992L
  )

superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Inner Join&lt;/h2&gt;
&lt;p&gt;As a reminder, &lt;code&gt;inner_join(x, y)&lt;/code&gt; returns all matched rows and columns between &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; tables. Notice that rows from &lt;code&gt;publishers&lt;/code&gt; will duplicate themselves for matching the rows from &lt;code&gt;superheros&lt;/code&gt; in this case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    inner_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 5
##   name     alignment gender publisher yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel          1939
## 2 Storm    good      female Marvel          1939
## 3 Mystique bad       female Marvel          1939
## 4 Batman   good      male   DC              1934
## 5 Joker    bad       male   DC              1934
## 6 Catwoman bad       female DC              1934&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Left Join&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;left_join(x, y)&lt;/code&gt;: Return all rows from x, and all columns from x and y. If there are multiple matches between x and y, all combination of the matches are returned. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 4
##   name     alignment gender publisher        
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;            
## 1 Magneto  bad       male   Marvel           
## 2 Storm    good      female Marvel           
## 3 Mystique bad       female Marvel           
## 4 Batman   good      male   DC               
## 5 Joker    bad       male   DC               
## 6 Catwoman bad       female DC               
## 7 Hellboy  good      male   Dark Horse Comics&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;publishers&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 2
##   publisher yr_founded
##   &amp;lt;chr&amp;gt;          &amp;lt;int&amp;gt;
## 1 DC              1934
## 2 Marvel          1939
## 3 Image           1992&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    left_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 7 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Semi join&lt;/h2&gt;
&lt;p&gt;semi_join(x, y): Return all rows from x where there are matching values in y, keeping just columns from x. A semi join differs from an inner join because an inner join will return one row of x for each matching row of y, where a semi join will never duplicate rows of x. This is a filtering join.&lt;/p&gt;
&lt;p&gt;Recall that &lt;code&gt;superheros&lt;/code&gt; is the baseline table&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    semi_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   name     alignment gender publisher
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;    
## 1 Magneto  bad       male   Marvel   
## 2 Storm    good      female Marvel   
## 3 Mystique bad       female Marvel   
## 4 Batman   good      male   DC       
## 5 Joker    bad       male   DC       
## 6 Catwoman bad       female DC&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Full Join&lt;/h2&gt;
&lt;p&gt;full_join(x, y): Return all rows and all columns from both x and y. Where there are not matching values, returns NA for the one missing. This is a mutating join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;superheroes %&amp;gt;%
    full_join(publishers, by = &amp;quot;publisher&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 8 x 5
##   name     alignment gender publisher         yr_founded
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;                  &amp;lt;int&amp;gt;
## 1 Magneto  bad       male   Marvel                  1939
## 2 Storm    good      female Marvel                  1939
## 3 Mystique bad       female Marvel                  1939
## 4 Batman   good      male   DC                      1934
## 5 Joker    bad       male   DC                      1934
## 6 Catwoman bad       female DC                      1934
## 7 Hellboy  good      male   Dark Horse Comics         NA
## 8 &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;      &amp;lt;NA&amp;gt;   Image                   1992&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So far, all the logic basically follows what we have talked in the &lt;a href=&#34;https://yetao7977.netlify.com/post/test/&#34;&gt;previous post&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;question&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Question&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What if column names in &lt;code&gt;table A&lt;/code&gt; and &lt;code&gt;table B&lt;/code&gt; are the same. How we gonna do for this situation.&lt;/li&gt;
&lt;li&gt;what if the colname we wanna join has different names in two tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s check out the different datatset&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts = readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/cb649926d41ce73490a9bb710e1501a273061723/parts.rds&amp;quot;))

parts_categories &amp;lt;- readr::read_rds(url(&amp;quot;https://assets.datacamp.com/production/repositories/5284/datasets/30fc459770c89e46cce9cce99752ca95fb1d06fe/part_categories.rds&amp;quot;))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;glimpse-the-data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;glimpse the data&lt;/h2&gt;
&lt;p&gt;Here we notice that both &lt;code&gt;table parts&lt;/code&gt; and &lt;code&gt;table parts_categories&lt;/code&gt; have col name called &lt;code&gt;name&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 3
##   part_num name                                                 part_cat_id
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                                      &amp;lt;dbl&amp;gt;
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow House Print              1
## 2 0902     Baseplate 16 x 24 with Set 080 Small White House Pr~           1
## 3 0903     Baseplate 16 x 24 with Set 080 Red House Print                 1
## 4 0904     Baseplate 16 x 24 with Set 080 Large White House Pr~           1
## 5 1        Homemaker Bookcase 2 x 4 x 4                                   7
## 6 10016414 Sticker Sheet #1 for 41055-1                                  58&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts_categories %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##      id name                   
##   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;                  
## 1     1 Baseplates             
## 2     3 Bricks Sloped          
## 3     4 Duplo, Quatro and Primo
## 4     5 Bricks Special         
## 5     6 Bricks Wedged          
## 6     7 Containers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s pratcice. In this case we are told that &lt;code&gt;part_cat_id and&lt;/code&gt; from &lt;code&gt;parts&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; from &lt;code&gt;parts_categories&lt;/code&gt; are the two columns we want to join. In this case we need to specify which two colnames we wanna join.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;%
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;)) %&amp;gt;% head # we need double quote in colname&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name.x                                     part_cat_id name.y   
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                            &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;    
## 1 0901     Baseplate 16 x 30 with Set 080 Yellow Hou~           1 Baseplat~
## 2 0902     Baseplate 16 x 24 with Set 080 Small Whit~           1 Baseplat~
## 3 0903     Baseplate 16 x 24 with Set 080 Red House ~           1 Baseplat~
## 4 0904     Baseplate 16 x 24 with Set 080 Large Whit~           1 Baseplat~
## 5 1        Homemaker Bookcase 2 x 4 x 4                         7 Containe~
## 6 10016414 Sticker Sheet #1 for 41055-1                        58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we find that &lt;code&gt;inner join function&lt;/code&gt; aissgned two different names to the same colname from two table: &lt;code&gt;name.x&lt;/code&gt; and &lt;code&gt;name.y&lt;/code&gt;. we can specify the suffox in the name by doing so.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;parts %&amp;gt;%
    inner_join(parts_categories, by = c(&amp;quot;part_cat_id&amp;quot; = &amp;quot;id&amp;quot;),
               suffix = c(&amp;quot;_parts&amp;quot;, &amp;quot;_part_categoroes&amp;quot;)) %&amp;gt;% head&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 4
##   part_num name_parts                        part_cat_id name_part_categor~
##   &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;                                   &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt;             
## 1 0901     Baseplate 16 x 30 with Set 080 Y~           1 Baseplates        
## 2 0902     Baseplate 16 x 24 with Set 080 S~           1 Baseplates        
## 3 0903     Baseplate 16 x 24 with Set 080 R~           1 Baseplates        
## 4 0904     Baseplate 16 x 24 with Set 080 L~           1 Baseplates        
## 5 1        Homemaker Bookcase 2 x 4 x 4                7 Containers        
## 6 10016414 Sticker Sheet #1 for 41055-1               58 Stickers&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that the new table above keeps &lt;code&gt;part_cat_id&lt;/code&gt; as column name since &lt;code&gt;parts table&lt;/code&gt; works as the baseline table.&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tidyverse Join function Part-1</title>
      <link>/post/test/</link>
      <pubDate>Sat, 18 Jan 2020 00:00:00 +0000</pubDate>
      <guid>/post/test/</guid>
      <description>


&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tidyverse)
library(lubridate)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;introduction&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;This post serves as a learning record and practice with tidyverse package which is super awesome and convenient for data exploration and manipulation. PLease also check out this very help tutorial: &lt;a href=&#34;https://stat545.com/join-cheatsheet.html&#34; class=&#34;uri&#34;&gt;https://stat545.com/join-cheatsheet.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Let’s explore some fucntions in tidyverse for joining tables. And these functions basically follow same idea in SQL.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inner Join (inner_join)&lt;/li&gt;
&lt;li&gt;Left Join (left_join)&lt;/li&gt;
&lt;li&gt;Right Join (right_join)&lt;/li&gt;
&lt;li&gt;Full Join (full_join)&lt;/li&gt;
&lt;li&gt;Semi Join (semi_join)&lt;/li&gt;
&lt;li&gt;Anti Join (anti_join)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You may ask we already have SQL for doing this and why you need Tidyverse to do the same thing. This is because there’re lots of time you don’t have permissions to do so in database, or don’t want to ETL for one-off(single time) analysis, then utilising dplyr and R to join the data can prove to be more efficient.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA = tibble(
    CustomerID =  1:3,
    NumberOfOrder = c(5, 10, 4),
    TotalVolumeOrder = c(500, 240, 40),
    AverageVolumeOrder = c(100,24, 10),
    LastOrderDate = ymd(c(&amp;quot;2017-10-01&amp;quot;,&amp;quot;2019-12-31&amp;quot;, &amp;quot;2014-10-10&amp;quot;))
)

# or you can create a tibble like this using tribble
tableB &amp;lt;- tibble::tribble(
    
    ~CustomerID,  ~Age,  ~Gender,   ~FavouriteProduct,
    1L,           20L,       &amp;quot;Male&amp;quot;,   &amp;quot;T-Shirt&amp;quot;,
    2L,           23L,       &amp;quot;Female&amp;quot;, &amp;quot;Legging&amp;quot;,
    4L,           21L,       &amp;quot;Male&amp;quot;,   &amp;quot;Jumpers&amp;quot;
)

tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;inner-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Inner Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;inner join&lt;/code&gt; will join same shared columns together within two tables, and we need to specify which column we wanna join. And here we use &lt;code&gt;CutomerID&lt;/code&gt;for joining two tables together. For example, if we decided to join on Customer ID, the new table would contain rows 1 and 2:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;CustomerID&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notice that &lt;code&gt;inner join&lt;/code&gt; makes sense when two columns are shared in both tables. Code below failed since join column &lt;code&gt;NumberOfOrder&lt;/code&gt; which is missing from RHS =&amp;gt; this is the tableB(RHS)&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    inner_join(tableB, by = &amp;#39;NumberOfOrder&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## `by` can&amp;#39;t contain join column `NumberOfOrder` which is missing from RHS&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;left-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Left Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Left join&lt;/code&gt; will also combine two tables. However for this timee &lt;code&gt;Left join&lt;/code&gt; will not make any change on table on the left. This also means that left table works as a baseline and we can add other columns from right table to the baseline table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    left_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          3             4               40               10 2014-10-10   
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we have some &lt;code&gt;NA&lt;/code&gt; Values since &lt;code&gt;CustomerID&lt;/code&gt; = 3 in &lt;code&gt;Left table&lt;/code&gt; doesn’t have information for Age, Gender, FavouriteProduct columns&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;right-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Right Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And &lt;code&gt;Right Join&lt;/code&gt; basically follows the same logic which is the opposite of &lt;code&gt;left join&lt;/code&gt; functtion&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    right_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          4            NA               NA               NA NA           
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;full-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Full Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Notice that table given by &lt;code&gt;left join&lt;/code&gt; and &lt;code&gt;right join&lt;/code&gt; are subset of table given by &lt;code&gt;Full Join&lt;/code&gt;. &lt;code&gt;Full join&lt;/code&gt; includes all the columns in tableA and tableB&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    full_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 4 x 8
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOr~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500              100 2017-10-01   
## 2          2            10              240               24 2019-12-31   
## 3          3             4               40               10 2014-10-10   
## 4          4            NA               NA               NA NA           
## # ... with 3 more variables: Age &amp;lt;int&amp;gt;, Gender &amp;lt;chr&amp;gt;,
## #   FavouriteProduct &amp;lt;chr&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;anti-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Anti Join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;As we have seen when looking at creating training &amp;amp; test datasets for machine learning in dplyr, anti joins are super helpful. An anti join will return all of the rows from the first table where there are not matching values from the second. The new anti join table will only contain data from the first table, based on the join predicate listed above. An example of this is shown below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    anti_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 1 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically &lt;code&gt;table A&lt;/code&gt; works as a baseline table, and &lt;code&gt;anti_join&lt;/code&gt; function will remove the row, which also appears in the &lt;code&gt;table B&lt;/code&gt;, and return the remained row here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;semi-join&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;&lt;strong&gt;Semi-join&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;And the last one is &lt;code&gt;Semi-join&lt;/code&gt;. Let’s see how it works&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31   
## 3          3             4               40                10 2014-10-10&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 3 x 4
##   CustomerID   Age Gender FavouriteProduct
##        &amp;lt;int&amp;gt; &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;           
## 1          1    20 Male   T-Shirt         
## 2          2    23 Female Legging         
## 3          4    21 Male   Jumpers&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tableA %&amp;gt;% 
    semi_join(tableB, by = &amp;quot;CustomerID&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 2 x 5
##   CustomerID NumberOfOrder TotalVolumeOrder AverageVolumeOrd~ LastOrderDate
##        &amp;lt;int&amp;gt;         &amp;lt;dbl&amp;gt;            &amp;lt;dbl&amp;gt;             &amp;lt;dbl&amp;gt; &amp;lt;date&amp;gt;       
## 1          1             5              500               100 2017-10-01   
## 2          2            10              240                24 2019-12-31&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It works similar as &lt;code&gt;inner join&lt;/code&gt; since it has two shared rows here. But we also notice that tableA works as baseline table and the new table does not have columns coming from tableB. we can think of it as we first do the &lt;code&gt;inner_join&lt;/code&gt; to have a &lt;code&gt;new_table&lt;/code&gt;, and then remove all the columns originating from &lt;code&gt;table B&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now check out &lt;a href=&#34;https://yetao7977.netlify.com/post/tidyverse-join-function-part-2/&#34;&gt;part2 for join family in tidyverse&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
